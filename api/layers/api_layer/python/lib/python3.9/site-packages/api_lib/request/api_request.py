import json
from core_lib.utils.thread_util import safe_get_thread_attribute
from core_lib.services.queue.queue_service import (
    send_message_to_queue,
    get_access_log_queue_url,
)


def api():
    def decorator(func):
        def wrapper(event):
            api_request = ApiRequest(event)

            message = {
                "log_type": "access",
                "event_type": "API_REQUEST",
                "lambda_event": safe_get_thread_attribute("event"),
                "request_headers": api_request.headers,
                "request_body": api_request.body,
                "request_path_parameters": api_request.path_parameters,
            }
            print(message)
            send_message_to_queue(message, get_access_log_queue_url())

            return func(api_request=api_request)

        return wrapper

    return decorator


class ApiRequest:
    def __init__(self, event: dict):
        self.headers = event.get("headers", {})
        self.path_parameters = event.get("pathParameters", {})
        self.body = (
            json.loads(event.get("body", {}))
            if self.headers.get("Content-Type", "application/json")
            == "application/json"
            and event.get("body") is not None
            else event.get("body")
        )
