from api_lib.auth.jwt_util import get_decoded_jwt


def authorize(authorization_type):
    def decorator(func):
        def wrapper(event, context):
            # Get the JWT from the event
            token = event["headers"].get("Authorization")
            if not token:
                raise Exception("Authorization header is missing")

            # Decode the JWT and extract the user information
            decoded_jwt = get_decoded_jwt(token)
            user_groups = decoded_jwt["user_groups"]

            # Verify that the user is authorized to access the resource
            if authorization_type not in user_groups:
                raise Exception("Unauthorized access")

            # Call the function with the provided event and context, and pass along the decoded JWT and user information
            return func(
                event,
                context,
                decoded_jwt=decoded_jwt,
                user_id=decoded_jwt["user_id"],
                username=decoded_jwt["username"],
            )

        return wrapper

    return decorator
