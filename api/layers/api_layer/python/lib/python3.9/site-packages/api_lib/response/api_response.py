import json
import os

from core_lib.utils.date_time_util import get_current_utc_datetime_iso
from core_lib.utils.thread_util import safe_get_thread_attribute

CORS_ALLOWED_ORIGINS = (
    os.getenv("CORS_ALLOWED_ORIGINS").split(",")
    if os.getenv("CORS_ALLOWED_ORIGINS")
    else []
)


def get_cors_allowed_origins():
    return (
        os.getenv("CORS_ALLOWED_ORIGINS").split(",")
        if os.getenv("CORS_ALLOWED_ORIGINS")
        else []
    )


class ApiResponse:
    def __init__(
        self, request_headers: dict, status_code: int, response_body: any = None
    ):
        self.status_code = status_code
        self.body = response_body
        self.headers = {
            "Access-Control-Allow-Origin": set_access_control_allow_origin(
                request_headers
            ),
            "Access-Control-Allow-Credentials": "true",
            "Access-Control-Allow-Headers": "Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,"
            "X-Access-Token,X-Refresh-Token,",
            "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PATCH,DELETE,PUT",
            "Content-Type": "application/json",
            "strict-transport-security": "max-age=31536000; includeSubdomains; preload",
            "content-security-policy": "frame-ancestors 'self';",
            "x-xss-protection": "1; mode=block",
            "x-frame-options": "DENY",
            "x-content-type-options": "nosniff",
        }

    def format(self, skip_access_log: bool = False):
        formatted_response = {
            "statusCode": self.status_code,
            "body": self.body,
            "headers": self.headers,
        }
        if not skip_access_log:
            message = {
                "utc_datetime_iso": get_current_utc_datetime_iso(),
                "log_type": "APP_ACCESS_LOG",
                "event_type": "API_RESPONSE",
                "principle": safe_get_thread_attribute("principle"),
                "lambda_event": safe_get_thread_attribute("event"),
                "response_status_code": self.status_code,
                "response_status_body": self.body,
                "response_status_headers": self.headers,
            }
            print(message)

        formatted_response["body"] = (
            json.dumps(self.body, cls=json.JSONEncoder)
            if self.body is not None
            else None
        )

        return formatted_response


def set_access_control_allow_origin(request_headers: dict = None):
    if request_headers is None:
        return None

    request_origin = request_headers.get("Origin", request_headers.get("origin", None))

    allowed_origins = get_cors_allowed_origins()
    if (
        request_origin is not None and request_origin in allowed_origins
    ) or allowed_origins == ["*"]:
        return request_origin
