import json
import os

from core_lib.services.queue.queue_service import (
    send_message_to_queue,
    get_access_log_queue_url,
)
from core_lib.utils.date_time_util import get_current_utc_datetime_iso
from core_lib.utils.thread_util import safe_get_thread_attribute

CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS').split(',') if os.getenv('CORS_ALLOWED_ORIGINS') else []


class ApiResponse:
    def __init__(
        self, request_headers: dict, status_code: int, response_body: dict = None
    ):
        self.status_code = status_code
        self.body = response_body
        self.headers = {
            "Access-Control-Allow-Origin": set_access_control_allow_origin(
                request_headers
            ),
            "Access-Control-Allow-Credentials": "true",
            "Access-Control-Allow-Headers": "Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,"
            "X-Access-Token,X-Refresh-Token,",
            "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PATCH,DELETE,PUT",
            "Content-Type": "application/json",
            "strict-transport-security": "max-age=31536000; includeSubdomains; preload",
            "content-security-policy": "frame-ancestors 'self';",
            "x-xss-protection": "1; mode=block",
            "x-frame-options": "DENY",
            "x-content-type-options": "nosniff",
        }

    def format(self):
        formatted_response = {
            "statusCode": self.status_code,
            "body": self.body,
            "headers": self.headers,
        }
        message = {
            "utc_datetime_iso": get_current_utc_datetime_iso(),
            "log_type": "access",
            "event_type": "API_RESPONSE",
            "principle": safe_get_thread_attribute("principle"),
            "lambda_event": safe_get_thread_attribute("event"),
            "response_status_code": self.status_code,
            "response_status_body": self.body,
            "response_status_headers": self.headers,
        }
        print(message)
        send_message_to_queue(message, get_access_log_queue_url())

        formatted_response["body"] = (
            json.dumps(self.body, cls=json.JSONEncoder) if self.body else None
        )

        return formatted_response


def set_access_control_allow_origin(request_headers: dict = None):
    if request_headers is None:
        return None

    request_origin = request_headers.get("Origin", request_headers.get("origin", None))
    if request_origin is not None and request_origin in CORS_ALLOWED_ORIGINS:
        return request_origin
