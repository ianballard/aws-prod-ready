AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Search API Stack

Globals:
  Api:
    Auth:
      DefaultAuthorizer: "PUBLIC"
  Function:
    MemorySize: 256
    Timeout: 30
    Runtime: python3.9
    Tracing: Active
    Environment:
      Variables:
        "stage": !Ref "stage"
        "region": !Ref AWS::Region
        "REPLICA_REGION": !Ref replicaRegion
        "VPC_ENABLED": !Ref enableVPC
        "CORS_ALLOWED_ORIGINS": !Sub "${corsAllowedOrigins}"
    Layers:
      - !Ref coreLayer
      - !Ref apiLayer
    VpcConfig: !If
      - isVPCEnabled
      - SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds: !Ref vpcSubnetIds
      - !Ref AWS::NoValue


Parameters:
  stage:
    Description: "Stage"
    Type: String
  replicaRegion:
    Description: "Replica Region"
    Type: String
  coreLayer:
    Description: "Core Library Layer"
    Type: String
  apiLayer:
    Description: "API Library Layer"
    Type: String
  securityGroup:
    Description: "Lambda VPC security group"
    Type: String
    Default: ""
  vpcSubnetIds:
    Description: "Lambda VPC Subnets"
    Type: CommaDelimitedList
    Default: ""
  enableVPC:
    Description: "Is VPC enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  dbTableName:
    Description: "Table Name"
    Type: String
    Default: "DBTable"
  corsAllowedOrigins:
    Description: "CORS ALLOWED ORIGINS (response header: Access-Control-Allow-Origin)"
    Type: String
    Default: ''
  enableDNS:
    Description: "Is Route53 DNS enabled"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  hostedZoneName:
    Description: "DNS Hosted Zone"
    Type: String
    Default: ''
  hostedZoneId:
    Description: "DNS Hosted Id"
    Type: String
    Default: ''
  emailDistributionSubscription:
    Description: "Email distribution of who gets notified of alerts"
    Type: String
    Default: ''

Conditions:
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]
  isDNSEnabled: !Equals [ !Ref enableDNS, 'true' ]

Resources:

  CloudWatchRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'

  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  ApiGatewayApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain

  SearchApiDnsStack:
    Condition: isDNSEnabled
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.dns.api.yaml
      Parameters:
        apiGatewayId: !Ref ApiGatewayApi
        apiName: 'search'
        stage: !Ref stage
        hostedZoneId: !Ref hostedZoneId
        hostedZoneName: !Ref hostedZoneName
        emailDistributionSubscription: !Ref emailDistributionSubscription

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: "Search API"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayApiAccessLogGroup.Arn
        Format: '{
          "accountId": "$context.accountId",
          "apiId": "$context.apiId",
          "awsEndpointRequestId": "$context.awsEndpointRequestId",
          "domainName": "$context.domainName",
          "domainPrefix": "$context.domainPrefix",
          "errorMessage": "$context.error.message",
          "errorMessageString": "$context.error.messageString",
          "errorResponseType": "$context.error.responseType",
          "errorValidationErrorString": "$context.error.validationErrorString",
          "extendedRequestId": "$context.extendedRequestId",
          "httpMethod": "$context.httpMethod",
          "identitySourceIp": "$context.identity.sourceIp",
          "identityUserAgent": "$context.identity.userAgent",
          "path": "$context.path",
          "protocol": "$context.protocol",
          "requestId": "$context.requestId",
          "requestTime": "$context.requestTime",
          "resourceId": "$context.resourceId",
          "resourcePath": "$context.resourcePath",
          "stage": "$context.stage",
          "wafResponseCode": "$context.wafResponseCode",
          "webaclArn": "$context.webaclArn"
        }'
      EndpointConfiguration:
        Type: REGIONAL
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.1
        paths:
          /v1.0/health:
            options:
              responses:
                "200":
                  description: "CORS"
                  headers:
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: !Sub "'${corsAllowedOrigins}'"
            get:
              responses:
                '200':
                  description: Successful health check
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckFunction.Arn}/invocations
              x-amazon-apigateway-request-validator: ValidateBodyAndParams
          /v1.0/search/user:
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        search_str:
                          type: string
                          minLength: 3
                      required:
                        - search_str
              responses:
                '200':
                  description: Successful search
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          type: object
                          properties:
                            profile:
                              type: string
                            username:
                              type: string
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchUsersFunction.Arn}/invocations
              x-amazon-apigateway-request-validator: ValidateBodyAndParams
            options:
              responses:
                "200":
                  description: "CORS"
                  headers:
                    Access-Control-Allow-Headers:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,PATCH,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: !Sub "'${corsAllowedOrigins}'"
        components:
          requestValidators:
            ValidateBodyAndParams:
              validateRequestBody: true
              validateRequestParameters: true

  HealthCheckFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SearchHealthCheckFunctionRoleCustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpGet'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cognito-idp:DescribeUserPoolClient'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/search/
      Handler: search_controller.health
      Tracing: !Ref AWS::NoValue
      Role: !GetAtt HealthCheckFunctionRole.Arn
      Tags:
        function_role: search_read_function
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /v1.0/health
            Method: get

  SearchUsersFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SearchUsersFunctionCustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPost'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  SearchUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/search/
      Handler: search_controller.search_users
      Role: !GetAtt SearchUsersFunctionRole.Arn
      Tags:
        function_role: search_read_function
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /v1.0/search/user
            Method: post

Outputs:
  ApiId:
    Description: "API Gateway Id"
    Value: !Ref ApiGatewayApi
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  SearchUsersFunctionArn:
    Description: "SearchUsersFunction ARN"
    Value: !GetAtt SearchUsersFunction.Arn
