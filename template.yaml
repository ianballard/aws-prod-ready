AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Main Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  backupRegion:
    Description: "Backup Region"
    Type: String
  appId:
    Description: "App ID used for unique s3 bucket names (no special characters, all lowercase)"
    Type: String
    Default: "abc123abc123"
  dbTableName:
    Description: "Table Name"
    Type: String
    Default: "DBTable"
  stackType:
    Description: "(primary|secondary)"
    Type: String
    AllowedValues:
      - 'primary'
      - 'secondary'
    Default: 'primary'
  enablePersistentStorage:
    Description: "Enable Persistent Storage (true|false) true for long lived environments (dev, release, prod) and false for ephemeral environments"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  enableVPC:
    Description: "Enable VPC (true|false|null)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
      - 'null'
    Default: 'false'
  enableOpenSearch:
    Description: "Enable Open Search (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableS3Replication:
    Description: "Is s3 replication enabled (true|false) NOTE: buckets must exist"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableAWSAuth:
    Description: "Is aws auth (cognito) enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  enableBackup:
    Description: "Is aws backup enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  enableSecurity:
    Description: "Is security enabled (true|false) - Security Hub, GuardDuty, Config"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  enableApiCDN:
    Description: "Is CDN for APIGW enabled"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  corsAllowedOrigins:
    Description: "CORS ALLOWED ORIGINS (response header: Access-Control-Allow-Origin)"
    Type: String
    Default: ''

Conditions:
  isPrimary: !Equals [ !Ref stackType, 'primary' ]
  isSecondary: !Equals [ !Ref stackType, 'secondary' ]
  isBackupEnabled: !Equals [ !Ref enableBackup, 'true' ]
  isAWSAuthEnabled: !Equals [ !Ref enableAWSAuth, 'true' ]
  isOpenSearchEnabled: !Equals [ !Ref enableOpenSearch, 'true' ]
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]
  isPersistentStorageEnabled: !Equals [ !Ref enablePersistentStorage, 'true' ]
  isSecurityEnabled: !Equals [ !Ref enableSecurity, 'true' ]
  isPrimaryAndStorageEnabled: !And
    - !Condition isPrimary
    - !Condition isPersistentStorageEnabled
  isAWSAuthAndStorageEnabled: !And
    - !Condition isAWSAuthEnabled
    - !Condition isPersistentStorageEnabled
  isOpenSearchAndStorageEnabled: !And
    - !Condition isOpenSearchEnabled
    - !Condition isPersistentStorageEnabled
  isSecondaryAndBackupEnabled: !And
    - !Condition isSecondary
    - !Condition isBackupEnabled

Resources:

  SecurityStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isSecurityEnabled
    Properties:
      TemplateURL: template.security.yaml
      Parameters:
        stage: !Ref stage
        stackType: !Ref stackType
        backupRegion: !Ref backupRegion
        accessLogBucket: !GetAtt S3Stack.Outputs.AccessLogBucketName
        enableBackup: !Ref enableBackup

  S3Stack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isPersistentStorageEnabled
    Properties:
      TemplateURL: template.s3.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        stackType: !Ref stackType
        appId: !Ref appId
        enableS3Replication: !Ref enableS3Replication
        enableBackup: !Ref enableBackup

  DynamoDBStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isPrimaryAndStorageEnabled
    Properties:
      TemplateURL: template.db.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        dbTableName: !Ref dbTableName
        enableBackup: !Ref enableBackup

  DataPipelineStack:
    Condition: isPersistentStorageEnabled
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.data-pipeline.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        appId: !Ref appId
        enableBackup: !Ref enableBackup
        stackType: !Ref stackType

  BackupDestinationVaultStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isSecondaryAndBackupEnabled
    Properties:
      TemplateURL: template.backup.yaml
      Parameters:
        stage: !Ref stage

  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isVPCEnabled
    Properties:
      TemplateURL: template.vpc.yaml

  AuthStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isAWSAuthAndStorageEnabled
    Properties:
      TemplateURL: template.auth.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion

  #  OpenSearchStack:
  #    Type: "AWS::CloudFormation::Stack"
  #    Condition: isOpenSearchAndStorageEnabled
  #    Properties:
  #      TemplateURL: template.opensearch.yaml
  #      Parameters:
  #        stage: !Ref stage
  #        backupRegion: !Ref backupRegion

  CoreLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core-library-layer
      Description: Core library for project.
      ContentUri: shared_layers/core_layer
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  ApiLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: api-library-layer
      Description: Api library for project.
      ContentUri: api/layers/api_layer
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  LogManagementStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.logs.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        securityGroup: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.SecurityGroup, "" ]
        vpcSubnetIds: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.VpcSubnetIds, "" ]
        enableVPC: !Ref enableVPC

  DBEventStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isPrimaryAndStorageEnabled
    Properties:
      TemplateURL: template.event.db.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        securityGroup: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.SecurityGroup, "" ]
        vpcSubnetIds: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.VpcSubnetIds, "" ]
        enableVPC: !Ref enableVPC
        dbStreamArn: !If [ isPrimaryAndStorageEnabled, !GetAtt DynamoDBStack.Outputs.TableStreamArn, "" ]

  AuthEventStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.event.auth.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        securityGroup: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.SecurityGroup, "" ]
        vpcSubnetIds: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.VpcSubnetIds, "" ]
        enableVPC: !Ref enableVPC

  AuthApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.api.auth.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        apiLayer: !Ref ApiLibraryLayer
        securityGroup: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.SecurityGroup, "" ]
        vpcSubnetIds: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.VpcSubnetIds, "" ]
        enableVPC: !Ref enableVPC
        dbTableName: !Ref dbTableName
        corsAllowedOrigins: !Ref corsAllowedOrigins
        enableApiCDN: !Ref enableApiCDN

  UserApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.api.user.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        apiLayer: !Ref ApiLibraryLayer
        securityGroup: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.SecurityGroup, "" ]
        vpcSubnetIds: !If [ isVPCEnabled, !GetAtt VPCStack.Outputs.VpcSubnetIds, "" ]
        enableVPC: !Ref enableVPC
        dbTableName: !Ref dbTableName
        corsAllowedOrigins: !Ref corsAllowedOrigins
        enableApiCDN: !Ref enableApiCDN
