AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Main Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  backupRegion:
    Description: "Backup Region"
    Type: String
  appId:
    Description: "App ID used for unique s3 bucket names (no special characters, all lowercase)"
    Type: String
    Default: "abc123abc123"
  stackType:
    Description: "(primary|secondary)"
    Type: String
    AllowedValues:
      - 'primary'
      - 'secondary'
    Default: 'primary'
  dbTableName:
    Description: "Table Name"
    Type: String
    Default: "DBTable"
  enableVPC:
    Description: "Enable VPC (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableOpenSearch:
    Description: "Enable Open Search (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableS3Replication:
    Description: "Is s3 replication enabled (true|false) NOTE: buckets must exist"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableAWSAuth:
    Description: "Is aws auth (cognito) enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'

Conditions:
  isPrimary: !Equals [ !Ref stackType, 'primary' ]
  isAWSAuthEnabled: !Equals [ !Ref enableAWSAuth, 'true' ]
  isOpenSearchEnabled: !Equals [ !Ref enableOpenSearch, 'true' ]
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]
  isVPCDisabled: !Equals [ !Ref enableVPC, 'false' ]
  isS3ReplicationEnabled: !Equals [ !Ref enableS3Replication, 'true' ]

Resources:

  DynamoDBStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isPrimary
    Properties:
      TemplateURL: template.db.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        dbTableName: !Ref dbTableName

  AuthStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isAWSAuthEnabled
    Properties:
      TemplateURL: template.auth.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion

  OpenSearchStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isOpenSearchEnabled
    Properties:
      TemplateURL: template.opensearch.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion

  S3Stack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.s3.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        stackType: !Ref stackType
        appId: !Ref appId
        enableS3Replication: !Ref enableS3Replication

  CoreLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core-library-layer
      Description: Core library for project.
      ContentUri: shared_layers/core_layer
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  ApiLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: api-library-layer
      Description: Api library for project.
      ContentUri: api/layers/api_layer
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  VPCStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isVPCEnabled
    Properties:
      TemplateURL: template.vpc.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        apiLayer: !Ref ApiLibraryLayer
        stackType: !Ref stackType
        dbStreamArn: !If [ isPrimary, !GetAtt DynamoDBStack.Outputs.TableStreamArn, "" ]

  NonVPCStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isVPCDisabled
    Properties:
      TemplateURL: template.non-vpc.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref CoreLibraryLayer
        apiLayer: !Ref ApiLibraryLayer
        stackType: !Ref stackType
        dbStreamArn: !If [ isPrimary, !GetAtt DynamoDBStack.Outputs.TableStreamArn, "" ]
