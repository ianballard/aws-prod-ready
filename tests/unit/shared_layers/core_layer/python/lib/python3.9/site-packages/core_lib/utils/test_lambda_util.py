import pytest
from unittest.mock import patch, MagicMock
from threading import current_thread
from aws_xray_sdk.core import xray_recorder
from core_lib.utils import lambda_util


@patch.object(lambda_util, "log_info")
@patch.object(lambda_util, "log_unexpected_exception")
@patch.object(current_thread(), "__setattr__")
@patch.object(xray_recorder, "begin_subsegment")
@patch.object(xray_recorder, "end_subsegment")
def test_lambda_handler_no_exception(
    mock_end_subseg, mock_begin_subseg, _, __, mock_log_info
):
    event = {"key": "value"}
    context = MagicMock()

    @lambda_util.lambda_handler()
    def test_func(event):
        return event

    result = test_func(event, context)
    assert result == event
    mock_log_info.assert_called_once_with(event)
    mock_begin_subseg.assert_called_once_with("ProcessingEvent")
    mock_end_subseg.assert_called_once()


@patch.object(lambda_util, "log_info")
@patch.object(lambda_util, "log_unexpected_exception")
@patch.object(current_thread(), "__setattr__")
@patch.object(xray_recorder, "begin_subsegment")
@patch.object(xray_recorder, "end_subsegment")
def test_lambda_handler_with_exception(_, __, ___, mock_log_unexp, mock_log_info):
    event = {"key": "value"}
    context = MagicMock()

    @lambda_util.lambda_handler()
    def test_func(event):
        raise Exception("Test exception")

    with pytest.raises(Exception) as excinfo:
        test_func(event, context)
    assert str(excinfo.value) == "Test exception"
    mock_log_info.assert_called_once_with(event)
    mock_log_unexp.assert_called()
