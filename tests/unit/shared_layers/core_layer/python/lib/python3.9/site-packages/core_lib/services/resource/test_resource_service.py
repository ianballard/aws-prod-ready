from unittest.mock import MagicMock, patch

import core_lib.services.resource.resource_service as rs


@patch("core_lib.services.resource.resource_service.RESOURCE_SERVICE_IMPL")
def test_get_resources(mock_service_impl):
    # Mock the get_resources function
    resource_data = {
        "ResourceTagMappingList": [
            {
                "ResourceARN": "string",
                "Tags": [
                    {"Key": "string", "Value": "string"},
                ],
            },
        ],
        "PaginationToken": "string",
    }
    mock_service_impl.get_resources = MagicMock(return_value=resource_data)

    # Call the get_resources function
    response = rs.get_resources()

    # Assert that the get_resources function was called
    mock_service_impl.get_resources.assert_called_once_with()

    # Assert the response
    assert response == resource_data


@patch("core_lib.services.resource.resource_service.RESOURCE_SERVICE_IMPL")
def test_get_lambda_resources_by_function_role(mock_service_impl):
    # Mock the get_lambda_resources_by_function_role function
    lambda_resource_data = {
        "ResourceTagMappingList": [
            {
                "ResourceARN": "string",
                "Tags": [
                    {"Key": "string", "Value": "string"},
                ],
            },
        ],
        "PaginationToken": "string",
    }
    mock_service_impl.get_lambda_resources_by_function_role = MagicMock(
        return_value=lambda_resource_data
    )

    # Call the get_lambda_resources_by_function_role function
    response = rs.get_lambda_resources_by_function_role()

    # Assert that the get_lambda_resources_by_function_role function was called
    mock_service_impl.get_lambda_resources_by_function_role.assert_called_once_with()

    # Assert the response
    assert response == lambda_resource_data
