from unittest.mock import MagicMock, patch

import core_lib.services.queue.queue_service as qs


@patch("core_lib.services.queue.queue_service.QUEUE_SERVICE_IMPL")
def test_get_auth_event_queue_url(mock_service_impl):
    # Mock the get_auth_event_queue_url function
    mock_service_impl.get_auth_event_queue_url = MagicMock(return_value="queue_url")

    # Call the get_auth_event_queue_url function
    response = qs.get_auth_event_queue_url()

    # Assert that the get_auth_event_queue_url function was called
    mock_service_impl.get_auth_event_queue_url.assert_called_once_with(region=None)

    # Assert the response
    assert response == "queue_url"


@patch("core_lib.services.queue.queue_service.QUEUE_SERVICE_IMPL")
def test_send_message_to_queue(mock_service_impl):
    # Mock the send_message_to_queue function
    mock_service_impl.send_message_to_queue = MagicMock(return_value="message_id")

    # Call the send_message_to_queue function
    response = qs.send_message_to_queue("test_message", "queue_url")

    # Assert that the send_message_to_queue function was called
    mock_service_impl.send_message_to_queue.assert_called_once_with(
        message="test_message", queue_url="queue_url", region=None, delay_seconds=0
    )

    # Assert the response
    assert response == "message_id"
