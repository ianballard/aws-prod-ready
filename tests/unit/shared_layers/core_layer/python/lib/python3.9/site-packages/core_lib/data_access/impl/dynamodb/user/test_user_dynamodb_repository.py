import unittest
import uuid
from unittest.mock import patch

from core_lib.data_access.impl.dynamodb.user.user_dynamodb_data_model import (
    build_user_item_key,
)
from core_lib.data_access.impl.dynamodb.user.user_dynamodb_repository import (
    UserDynamoDBRepository,
)
from core_lib.utils.json_schema_util import ACTIVE_STATUS


class TestUserDynamoDBRepository(unittest.TestCase):
    def setUp(self):
        self.repo = UserDynamoDBRepository()

    @patch(
        "core_lib.data_access.impl.dynamodb.base_dynamodb_repository.BaseDynamoDBRepository.get_item"
    )
    def test_find_user_by_id(self, mock_get_item):
        mock_user = {"username": "test_user"}
        mock_get_item.return_value = mock_user

        result = self.repo.find_user_by_id("1")
        mock_get_item.assert_called_with(
            key=build_user_item_key(_id="1"), projection_expression=None
        )
        self.assertEqual(result, mock_user)

    @patch(
        "core_lib.data_access.impl.dynamodb.base_dynamodb_repository.BaseDynamoDBRepository.put_item"
    )
    def test_create_user(self, mock_put_item):
        _id = str(uuid.uuid4())
        user = {
            "pk": "User",
            "sk": f"User-{_id}",
            "username": "user1",
            "profile": _id,
            "first_name": "test",
            "last_name": "test",
            "origin_region": "us-east-2",
            "email": "test@test.com",
            "entity_status": ACTIVE_STATUS,
        }
        self.repo.create_user(user)
        mock_put_item.assert_called_with(item=user)

    @patch(
        "core_lib.data_access.impl.dynamodb.base_dynamodb_repository.BaseDynamoDBRepository.update_item"
    )
    def test_update_user(self, mock_update_item):
        updates = {"username": "updated_user"}
        self.repo.update_user("1", updates)
        mock_update_item.assert_called_with(
            key=build_user_item_key(_id="1"), updates=updates
        )

    @patch(
        "core_lib.data_access.impl.dynamodb.base_dynamodb_repository.BaseDynamoDBRepository.soft_delete_item"
    )
    def test_delete_user_by_id(self, mock_soft_delete_item):
        self.repo.delete_user_by_id("1")
        mock_soft_delete_item.assert_called_with(key=build_user_item_key(_id="1"))
