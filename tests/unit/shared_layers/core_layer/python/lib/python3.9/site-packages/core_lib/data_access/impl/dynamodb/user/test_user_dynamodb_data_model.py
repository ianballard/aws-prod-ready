import datetime
import uuid
from unittest.mock import patch

from core_lib.data_access.impl.dynamodb.user.user_dynamodb_data_model import (
    get_user_json_schema_validator,
    get_user_allowed_updates_json_schema_validator,
    build_formatted_user_id,
    build_user_item_key,
    build_new_user,
    UserDynamoDBItem,
    EntityType,
)


def test_get_user_json_schema_validator():
    validator = get_user_json_schema_validator()
    _id = str(uuid.uuid4())
    test_json = {
        "pk": EntityType.User.value,
        "sk": f"{EntityType.User.value}-{_id}",
        "entity_type": EntityType.User.value,
        "profile": _id,
        "username": "test-username",
        "first_name": "Test",
        "last_name": "User",
        "email": "test@test.com",
        "entity_status": "ACTIVE",
        "origin_region": "us-east-2",
        "created_date_time": datetime.datetime.utcnow().isoformat(),
    }
    validator.validate(instance=test_json)


def test_get_user_allowed_updates_json_schema_validator():
    validator = get_user_allowed_updates_json_schema_validator()
    test_json = {"entity_status": "INACTIVE", "is_deleted": False}
    validator.validate(instance=test_json)


def test_build_formatted_user_id():
    user_id = str(uuid.uuid4())
    assert build_formatted_user_id(user_id) == f"{EntityType.User.value}-{user_id}"


def test_build_user_item_key():
    _id = str(uuid.uuid4())
    assert build_user_item_key(_id) == {
        "pk": EntityType.User.value,
        "sk": f"{EntityType.User.value}-{_id}",
    }


@patch(
    "core_lib.data_access.impl.dynamodb.user.user_dynamodb_data_model.build_new_item"
)
def test_build_new_user(mocked_build_new_item):
    _id = str(uuid.uuid4())
    user = {"profile": _id}
    build_new_user(user)
    mocked_build_new_item.assert_called_once_with(
        {
            **user,
            "pk": EntityType.User.value,
            "sk": f"{EntityType.User.value}-{_id}",
            "entity_type": EntityType.User.value,
        }
    )


def test_user_dynamodb_item():
    item = UserDynamoDBItem()
    assert item.build_new_item.__name__ == "build_new_user"
    assert item.put_item_validator is get_user_json_schema_validator()
    assert (
        item.update_item_validator is get_user_allowed_updates_json_schema_validator()
    )
