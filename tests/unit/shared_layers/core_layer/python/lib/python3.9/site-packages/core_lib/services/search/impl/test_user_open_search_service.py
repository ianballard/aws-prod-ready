from unittest.mock import patch, MagicMock

from core_lib.services.search.impl.user_open_search_service import (
    create_user_index,
    upsert_user_doc,
    search_users,
    user_index_exists,
    USER_INDEX_NAME,
)
from core_lib.utils.requests_util import TIMEOUT


@patch("core_lib.services.search.impl.user_open_search_service.create_index")
def test_create_user_index(mock_create_index):
    mock_create_index.return_value = {"acknowledged": True}
    result = create_user_index()
    assert result == {"acknowledged": True}
    mock_create_index.assert_called_once()


@patch("core_lib.services.search.impl.user_open_search_service.upsert")
def test_upsert_user_doc(mock_upsert):
    mock_upsert.return_value = {"result": "updated"}
    user = {
        "username": "John",
        "profile": "john123",
        "email": "john@mail.com",
        "first_name": "John",
        "last_name": "Doe",
    }
    result = upsert_user_doc(user)
    assert result == {"result": "updated"}
    mock_upsert.assert_called_once_with(
        index_name=USER_INDEX_NAME,
        _id="john123",
        doc={
            "username": "john",
            "profile": "john123",
            "email": "john@mail.com",
            "first_name": "john",
            "last_name": "doe",
        },
    )


@patch("core_lib.services.search.impl.user_open_search_service.search")
def test_search_users(mock_search):
    mock_search.return_value = {
        "suggest": {
            "username_suggestion": [
                {
                    "options": [
                        {
                            "_id": "1",
                            "_source": {"profile": "john123", "username": "John"},
                        }
                    ]
                }
            ]
        }
    }
    result = search_users("John")
    assert result == [{"profile": "john123", "username": "John"}]
    mock_search.assert_called_once_with(
        index_name=USER_INDEX_NAME,
        query={
            "suggest": {
                "username_suggestion": {
                    "prefix": "John",
                    "completion": {"field": "username"},
                },
                "first_name_suggestion": {
                    "prefix": "John",
                    "completion": {"field": "first_name"},
                },
                "last_name_suggestion": {
                    "prefix": "John",
                    "completion": {"field": "last_name"},
                },
                "email_suggestion": {
                    "prefix": "John",
                    "completion": {"field": "email"},
                },
            }
        },
    )


@patch("core_lib.services.search.impl.user_open_search_service.get_search_domain_url")
@patch("core_lib.services.search.impl.user_open_search_service.get_es_aws_auth")
@patch("core_lib.services.search.impl.user_open_search_service.requests_util.head")
def test_user_index_exists(mock_head, mock_get_es_aws_auth, mock_get_search_domain_url):
    mock_get_search_domain_url.return_value = "test_url"
    mock_get_es_aws_auth.return_value = MagicMock()
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_head.return_value = mock_response
    assert user_index_exists() is True
    mock_head.assert_called_once_with(
        "https://test_url/user_v1",
        auth=mock_get_es_aws_auth.return_value,
        timeout=TIMEOUT,
    )
