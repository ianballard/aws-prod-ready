from unittest.mock import MagicMock
from unittest.mock import patch

from core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_repository import (
    UserAssociationDynamoDBRepository,
    USER_ENTITY_TYPE,
    Key,
)


@patch.object(UserAssociationDynamoDBRepository, "put_item")
def test_create_user_association(mock_put_item):
    user_a_id = "test_id_1"
    user_b_id = "test_id_2"

    repository = UserAssociationDynamoDBRepository()
    repository.create_user_association(user_a_id, user_b_id)

    mock_put_item.assert_called_once_with(
        item={"user_a_id": user_a_id, "user_b_id": user_b_id}
    )


@patch.object(UserAssociationDynamoDBRepository, "query")
@patch(
    "core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_repository."
    "build_formatted_user_id"
)
def test_query_associated_users(mock_build_formatted_user_id, mock_query):
    user_a_id = "test_id_1"
    user_b_id = "test_id_2"
    projection_expression = "test_expression"
    mock_build_formatted_user_id.return_value = "formatted_id"

    repository = UserAssociationDynamoDBRepository()
    repository.query_associated_users(user_a_id, user_b_id, projection_expression)

    mock_query.assert_called_once_with(
        KeyConditionExpression=Key("pk").eq("formatted_id")
        & Key("sk").eq("formatted_id"),
        ProjectionExpression=projection_expression,
    )


@patch.object(UserAssociationDynamoDBRepository, "query_associated_users")
@patch.object(UserAssociationDynamoDBRepository, "batch_get_item")
def test_query_associated_users_with_profiles(
    mock_batch_get_item, mock_query_associated_users
):
    user_a_id = "test_id_1"
    user_b_id = "test_id_2"
    last_evaluated_key = "test_key"
    mock_query_associated_users.return_value = {
        "Items": [{"sk": "test_sk"}],
        "LastEvaluatedKey": last_evaluated_key,
    }
    mock_batch_get_item.return_value = ["test_profile"]

    repository = UserAssociationDynamoDBRepository()
    repository.db_service = MagicMock()
    mock_db_table_name = MagicMock(return_value="mock_table")
    repository.db_service.db_table_name = mock_db_table_name

    result = repository.query_associated_users_with_profiles(user_a_id, user_b_id)

    mock_query_associated_users.assert_called_once_with(user_a_id, user_b_id)
    mock_db_table_name.assert_called_once()  # Assert that the method was called
    mock_batch_get_item.assert_called_once_with(
        RequestItems={
            "mock_table": {
                "Keys": [{"pk": USER_ENTITY_TYPE.value, "sk": "test_sk"}],
                "ProjectionExpression": "profile,username,first_name,last_name,email,entity_status",
            }
        }
    )

    assert result == {
        "last_evaluated_key": last_evaluated_key,
        "items": ["test_profile"],
    }
