# Import your required libraries
from unittest.mock import patch, MagicMock
import pytest
import boto3
from core_lib.data_access.impl.dynamodb.base_dynamodb_data_model import DynamoDBItem
from core_lib.services.database.impl.dynamodb_service import (
    db_table_name,
    db_table,
    dynamodb_json_to_json,
    put_item,
    query_items,
    get_item,
    update_item,
    delete_item,
    batch_get_item,
    build_new_item,
    build_update_expression_and_values,
    describe_table,
    health_check,
)


from core_lib.services.parameter.parameter_service import ParameterName


# Test for db_table_name
@patch(
    "core_lib.services.database.impl.dynamodb_service.get_parameter_value",
    return_value="mock_table_name",
)
def test_db_table_name(mock_get_parameter_value):
    assert db_table_name() == "mock_table_name"
    mock_get_parameter_value.assert_called_once_with(
        parameter_name=ParameterName.DB_TABLE
    )


# Test for db_table
@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_resource.Table",
    return_value="mock_table",
)
@patch(
    "core_lib.services.database.impl.dynamodb_service.db_table_name",
    return_value="mock_table_name",
)
def test_db_table(mock_db_table_name, mock_dynamodb_table):
    assert db_table() == "mock_table"
    mock_db_table_name.assert_called_once()
    mock_dynamodb_table.assert_called_once_with("mock_table_name")


# Test for dynamodb_json_to_json
def test_dynamodb_json_to_json():
    dynamodb_json = {"pk": {"S": "test"}, "sk": {"S": "test"}, "attr": {"S": "value"}}
    normal_json = dynamodb_json_to_json(dynamodb_json)
    assert normal_json == {"pk": "test", "sk": "test", "attr": "value"}


@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_put_item",
    return_value={"ResponseMetadata": {"HTTPStatusCode": 200}},
)
def test_put_item(dynamodb_put_item_mock):
    # Prepare the test data
    item = {"key": "value"}
    new_item = {"key": "value", "extra": "extra value"}

    # Mock the DynamoDBItem object
    data_model_mock = MagicMock()
    data_model_mock.build_new_item.return_value = new_item
    data_model_mock.put_item_validator.validate.return_value = None

    # Call the function with the mocked dependencies
    response = put_item(item=item, data_model=data_model_mock)

    # Assert that the mocked dependencies were called with the correct arguments
    data_model_mock.build_new_item.assert_called_once_with(item)
    data_model_mock.put_item_validator.validate.assert_called_once_with(
        instance=new_item
    )
    dynamodb_put_item_mock.assert_called_once_with(item=new_item)

    # Assert that the function returned the correct result
    assert response == {"ResponseMetadata": {"HTTPStatusCode": 200}}


@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_query",
    return_value={"Items": [], "Count": 0, "ScannedCount": 0},
)
def test_query_items(dynamodb_query_mock):
    kwargs = {
        "KeyConditionExpression": "key = :v_key",
        "ExpressionAttributeValues": {":v_key": "value"},
    }

    response = query_items(**kwargs)

    dynamodb_query_mock.assert_called_once_with(**kwargs)
    assert response == {
        "Items": [],
        "Count": 0,
        "ScannedCount": 0,
        "LastEvaluatedKey": None,
    }


@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_get_item",
    return_value={"Item": {"key": "value"}},
)
def test_get_item(dynamodb_get_item_mock):
    kwargs = {"Key": {"id": "123"}}

    response = get_item(**kwargs)

    dynamodb_get_item_mock.assert_called_once_with(**kwargs)
    assert response == {"key": "value"}


@patch(
    "core_lib.services.database.impl.dynamodb_service.build_update_expression_and_values",
    return_value=("set key=:v_key", {":v_key": "new value"}),
)
@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_update_item",
    return_value={"Attributes": {"key": "new value"}},
)
def test_update_item(
    dynamodb_update_item_mock, build_update_expression_and_values_mock
):
    key = {"id": "123"}
    updates = {"key": "new value"}

    data_model_mock = MagicMock()
    data_model_mock.update_item_validator.validate.return_value = None

    response = update_item(key=key, updates=updates, data_model=data_model_mock)

    build_update_expression_and_values_mock.assert_called_once_with(updates)
    data_model_mock.update_item_validator.validate.assert_called_once_with(
        instance=updates
    )
    dynamodb_update_item_mock.assert_called_once_with(
        Key=key,
        UpdateExpression="set key=:v_key",
        ExpressionAttributeValues={":v_key": "new value"},
        ReturnValues="ALL_NEW",
    )
    assert response == {"Attributes": {"key": "new value"}}


@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_delete_item",
    return_value={"ResponseMetadata": {"HTTPStatusCode": 200}},
)
def test_delete_item(dynamodb_delete_item_mock):
    kwargs = {"Key": {"id": "123"}}

    response = delete_item(**kwargs)

    dynamodb_delete_item_mock.assert_called_once_with(**kwargs)
    assert response == {"ResponseMetadata": {"HTTPStatusCode": 200}}


@patch(
    "core_lib.services.database.impl.dynamodb_service.db_table_name",
    return_value="table_name",
)
@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_batch_get_item",
    return_value={"Responses": {"table_name": [{"key": "value"}]}},
)
def test_batch_get_item(mock_get_item, mock_db_name):
    result = batch_get_item(RequestItems={"table_name": {"Keys": [{"key": "value"}]}})
    assert result == [{"key": "value"}]
    mock_get_item.assert_called_once_with(
        RequestItems={"table_name": {"Keys": [{"key": "value"}]}}
    )


@patch(
    "core_lib.services.database.impl.dynamodb_service.dynamodb_client.describe_table",
    return_value={"Table": {"TableStatus": "ACTIVE"}},
)
def test_health_check(describe_table_mock):
    describe_table_mock.return_value = {"Table": {"TableStatus": "ACTIVE"}}

    response = health_check()

    describe_table_mock.assert_called_once_with(TableName=db_table_name())
    assert response == {"Table": {"TableStatus": "ACTIVE"}}
