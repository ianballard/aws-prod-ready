import pytest
from unittest.mock import patch, MagicMock
import base64
import gzip
import json
import boto3
from core_lib.services.logs.impl import cloudwatch_logs_service


@patch("core_lib.services.logs.impl.cloudwatch_logs_service.print")
@patch("core_lib.services.logs.impl.cloudwatch_logs_service.json")
@patch("core_lib.services.logs.impl.cloudwatch_logs_service.gzip")
@patch("core_lib.services.logs.impl.cloudwatch_logs_service.base64")
def test_log_subscribed_log_events(mock_base64, mock_gzip, mock_json, mock_print):
    # Arrange
    event = {
        "awslogs": {
            "data": base64.b64encode(
                gzip.compress(
                    json.dumps({"logEvents": [{"message": "test_message"}]}).encode()
                )
            ).decode()
        }
    }
    mock_json.loads.side_effect = [
        json.loads(gzip.decompress(base64.b64decode(event["awslogs"]["data"]))),
        {"message": "test_message"},
    ]

    # Act
    cloudwatch_logs_service.log_subscribed_log_events(event)

    # Assert
    mock_base64.b64decode.assert_called_once()
    mock_gzip.decompress.assert_called_once()
    mock_json.loads.assert_called()
    mock_print.assert_called_once_with({"message": "test_message"})


@patch("core_lib.services.logs.impl.cloudwatch_logs_service.logs_client")
@patch("core_lib.services.logs.impl.cloudwatch_logs_service.log_info")
def test_put_subscription_filter(mock_log_info, mock_logs_client):
    # Arrange
    log_group = "my_log_group"
    filter_name = "my_filter_name"
    destination_arn = "my_destination_arn"
    filter_pattern = "my_filter_pattern"
    mock_logs_client.put_subscription_filter.return_value = {
        "ResponseMetadata": {"HTTPStatusCode": 200}
    }

    # Act
    cloudwatch_logs_service.put_subscription_filter(
        log_group, filter_name, destination_arn, filter_pattern
    )

    # Assert
    mock_log_info.assert_called_once_with(
        f"{log_group} put_subscription_filter: {filter_name} to {destination_arn}"
    )
    mock_logs_client.put_subscription_filter.assert_called_once_with(
        logGroupName=log_group,
        filterName=filter_name,
        filterPattern=filter_pattern,
        destinationArn=destination_arn,
    )
