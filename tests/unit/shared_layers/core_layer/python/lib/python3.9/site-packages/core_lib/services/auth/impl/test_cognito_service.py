import base64
import hashlib
import hmac
import os
from unittest.mock import patch

from core_lib.services.auth.impl.cognito_service import (
    get_user_pool_id,
    get_user_pool_client,
    get_known_public_keys,
    get_app_client_secret,
    admin_create_user,
    admin_set_user_password,
    admin_disable_user,
    get_cognito_client_secret_hash,
    sign_up,
    confirm_sign_up,
    initiate_user_password_auth,
    admin_enable_user,
    respond_to_new_password_auth_challenge,
    health_check,
)
from core_lib.services.parameter.parameter_service import ParameterName

# Create mock responses
mock_get_parameter_value_response = "mock_parameter_value"
mock_jwks_response_json = {
    "keys": [
        {"mock_key_1": "mock_value_1"},
        {"mock_key_2": "mock_value_2"},
    ]
}

# Patch environment variable
os.environ["region"] = "mock_region"


@patch(
    "core_lib.services.auth.impl.cognito_service.get_parameter_value",
    return_value=mock_get_parameter_value_response,
)
def test_get_user_pool_id(mock_get_parameter_value):
    response = get_user_pool_id()
    assert response == mock_get_parameter_value_response
    mock_get_parameter_value.assert_called_once_with(ParameterName.USER_POOL_ID)


@patch(
    "core_lib.services.auth.impl.cognito_service.get_parameter_value",
    return_value=mock_get_parameter_value_response,
)
def test_get_user_pool_client(mock_get_parameter_value):
    response = get_user_pool_client()
    assert response == mock_get_parameter_value_response
    mock_get_parameter_value.assert_called_once_with(ParameterName.USER_POOL_CLIENT)


@patch("core_lib.services.auth.impl.cognito_service.requests_util.get")
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value=mock_get_parameter_value_response,
)
def test_get_known_public_keys(mock_get_user_pool_id, mock_requests_util_get):
    mock_requests_util_get.return_value.json.return_value = mock_jwks_response_json
    response = get_known_public_keys()
    assert response == mock_jwks_response_json["keys"]


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.describe_user_pool_client"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value=mock_get_parameter_value_response,
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value=mock_get_parameter_value_response,
)
def test_get_app_client_secret(
    mock_get_user_pool_client, mock_get_user_pool_id, mock_cognito_idp_client
):
    mock_client_secret = "mock_client_secret"
    mock_cognito_idp_client.return_value = {
        "UserPoolClient": {"ClientSecret": mock_client_secret}
    }
    response = get_app_client_secret()
    assert response == mock_client_secret


@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_app_client_secret",
    return_value="mock_secret",
)
def test_get_cognito_client_secret_hash(
    mock_get_app_client_secret, mock_get_user_pool_client
):
    username = "mock_user"
    message = bytes(username + "mock_client", "utf-8")
    key = bytes("mock_secret", "utf-8")
    expected_hash = base64.b64encode(
        hmac.new(key, message, digestmod=hashlib.sha256).digest()
    ).decode()
    response = get_cognito_client_secret_hash(username)
    assert response == expected_hash


@patch("core_lib.services.auth.impl.cognito_service.cognito_idp_client.sign_up")
@patch(
    "core_lib.services.auth.impl.cognito_service.get_cognito_client_secret_hash",
    return_value="mock_secret_hash",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client_id",
)
def test_sign_up(
    mock_get_user_pool_client,
    mock_get_cognito_client_secret_hash,
    mock_cognito_idp_client_sign_up,
):
    mock_cognito_idp_client_sign_up.return_value = {
        "UserConfirmed": True,
        "UserSub": "user_sub_id",
    }
    response = sign_up(
        "mock_profile",
        "mock_username",
        "mock_email",
        "mock_password",
        "mock_first",
        "mock_last",
    )
    assert response == {"username": "mock_username", "profile": "mock_profile"}
    mock_cognito_idp_client_sign_up.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_update_user_attributes"
)
@patch("core_lib.services.auth.impl.cognito_service.cognito_idp_client.confirm_sign_up")
@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_enable_user"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client_id",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_cognito_client_secret_hash",
    return_value="mock_secret_hash",
)
def test_confirm_sign_up(
    mock_get_cognito_client_secret_hash,
    mock_get_user_pool_client,
    mock_get_user_pool_id,
    mock_admin_enable_user,
    mock_confirm_sign_up,
    mock_admin_update_user_attributes,
):
    mock_confirm_sign_up.return_value = {}
    confirm_sign_up("mock_username", "mock_code")
    mock_admin_enable_user.assert_called_once_with(
        UserPoolId="mock_pool_id", Username="mock_username"
    )
    mock_confirm_sign_up.assert_called_once()
    mock_admin_update_user_attributes.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_create_user"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_set_user_password"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
def test_admin_create_user(
    mock_get_user_pool_id, mock_admin_set_user_password, mock_admin_create_user
):
    mock_admin_create_user.return_value = {"User": {"Username": "mock_username"}}
    mock_admin_set_user_password.return_value = {"User": {"Username": "mock_username"}}
    response = admin_create_user(
        "mock_profile",
        "mock_username",
        "mock_email",
        "mock_password",
        "mock_first",
        "mock_last",
        is_password_permanent=True,
    )
    assert response is None
    mock_admin_create_user.assert_called_once()
    mock_admin_set_user_password.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_set_user_password"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
def test_admin_set_user_password(mock_get_user_pool_id, mock_admin_set_user_password):
    mock_admin_set_user_password.return_value = {}
    response = admin_set_user_password("mock_username", "mock_password")
    assert response == {}
    mock_admin_set_user_password.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_disable_user"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
def test_admin_disable_user(mock_get_user_pool_id, mock_admin_disable_user):
    mock_admin_disable_user.return_value = {}
    response = admin_disable_user("mock_username")
    assert response == {}
    mock_admin_disable_user.assert_called_once()


@patch("core_lib.services.auth.impl.cognito_service.cognito_idp_client.initiate_auth")
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client_id",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_cognito_client_secret_hash",
    return_value="mock_secret_hash",
)
def test_initiate_user_password_auth(
    mock_get_cognito_client_secret_hash, mock_get_user_pool_client, mock_initiate_auth
):
    mock_initiate_auth.return_value = {
        "AuthenticationResult": {"IdToken": "mock_id_token"}
    }
    response = initiate_user_password_auth("mock_username", "mock_password")
    assert response == {"AuthenticationResult": {"IdToken": "mock_id_token"}}
    mock_initiate_auth.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.admin_enable_user"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
def test_admin_enable_user(mock_get_user_pool_id, mock_admin_enable_user):
    mock_admin_enable_user.return_value = {}
    response = admin_enable_user("mock_username")
    assert response == {}
    mock_admin_enable_user.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.respond_to_auth_challenge"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client_id",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_cognito_client_secret_hash",
    return_value="mock_secret_hash",
)
def test_respond_to_new_password_auth_challenge(
    mock_get_cognito_client_secret_hash,
    mock_get_user_pool_client,
    mock_respond_to_auth_challenge,
):
    mock_respond_to_auth_challenge.return_value = {
        "AuthenticationResult": {"IdToken": "mock_id_token"}
    }
    response = respond_to_new_password_auth_challenge(
        "mock_username", "mock_password", "mock_session"
    )
    assert response == {"AuthenticationResult": {"IdToken": "mock_id_token"}}
    mock_respond_to_auth_challenge.assert_called_once()


@patch(
    "core_lib.services.auth.impl.cognito_service.cognito_idp_client.describe_user_pool_client"
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_id",
    return_value="mock_pool_id",
)
@patch(
    "core_lib.services.auth.impl.cognito_service.get_user_pool_client",
    return_value="mock_client_id",
)
def test_health_check(
    mock_get_user_pool_client, mock_get_user_pool_id, mock_describe_user_pool_client
):
    mock_describe_user_pool_client.return_value = {
        "UserPoolClient": {"ClientId": "mock_client_id"}
    }
    response = health_check()
    assert response == {"UserPoolClient": {"ClientId": "mock_client_id"}}
    mock_describe_user_pool_client.assert_called_once()
