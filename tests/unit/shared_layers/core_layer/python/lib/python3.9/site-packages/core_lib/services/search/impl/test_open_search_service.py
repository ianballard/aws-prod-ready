import json
from unittest.mock import MagicMock, patch

from opensearchpy import RequestsHttpConnection, OpenSearch
from requests_aws4auth import AWS4Auth

from core_lib.services.parameter.parameter_service import ParameterName
from core_lib.services.search.impl.open_search_service import (
    get_search_domain_url,
    get_search_domain_name,
    get_open_search_secret,
    get_search_client,
    create_index,
    upsert,
    search,
    is_domain_processing_changes,
    enable_audit_logs,
    get_es_aws_auth,
    assign_access,
    get_lambda_roles_by_function_role_tag,
    get_client_info,
)


@patch("core_lib.services.search.impl.open_search_service.get_parameter_value")
def test_get_search_domain_url(mock_get_parameter_value):
    mock_get_parameter_value.return_value = "test_url"
    assert get_search_domain_url() == "test_url"
    mock_get_parameter_value.assert_called_once_with(
        parameter_name=ParameterName.OPEN_SEARCH_DOMAIN_URL
    )


@patch("core_lib.services.search.impl.open_search_service.get_parameter_value")
def test_get_search_domain_name(mock_get_parameter_value):
    mock_get_parameter_value.return_value = "test_name"
    assert get_search_domain_name() == "test_name"
    mock_get_parameter_value.assert_called_once_with(
        parameter_name=ParameterName.OPEN_SEARCH_DOMAIN_NAME
    )


@patch(
    "core_lib.services.search.impl.open_search_service.secrets_service.get_secret_value"
)
def test_get_open_search_secret(mock_get_secret_value):
    mock_secret_value = MagicMock()
    mock_secret_value.get.return_value = json.dumps({"key": "value"})
    mock_get_secret_value.return_value = mock_secret_value
    assert get_open_search_secret() == {"key": "value"}


@patch("core_lib.services.search.impl.open_search_service.get_es_aws_auth")
@patch("core_lib.services.search.impl.open_search_service.get_search_domain_url")
def test_get_search_client(mock_get_search_domain_url, mock_get_es_aws_auth):
    mock_get_search_domain_url.return_value = "test_url"
    mock_get_es_aws_auth.return_value = MagicMock(spec=AWS4Auth)
    with patch.object(OpenSearch, "__init__", return_value=None) as mock_opensearch:
        get_search_client()
        mock_opensearch.assert_called_once_with(
            hosts=[{"host": "test_url", "port": 443}],
            http_auth=mock_get_es_aws_auth.return_value,
            use_ssl=True,
            verify_certs=True,
            connection_class=RequestsHttpConnection,
        )


def test_get_client_info():
    with patch.object(OpenSearch, "info", return_value="client_info") as mock_info:
        assert get_client_info() == "client_info"
        mock_info.assert_called_once()


@patch("core_lib.services.search.impl.open_search_service.get_search_client")
def test_create_index(mock_get_search_client):
    mock_get_search_client.return_value.indices.create.return_value = "create_response"
    assert create_index("test_index", {}) == "create_response"
    mock_get_search_client.return_value.indices.create.assert_called_once_with(
        index="test_index", body={}
    )


@patch("core_lib.services.search.impl.open_search_service.get_search_client")
def test_upsert(mock_get_search_client):
    mock_get_search_client.return_value.update.return_value = "update_response"
    assert upsert("test_index", "test_id", {}) == "update_response"
    mock_get_search_client.return_value.update.assert_called_once_with(
        index="test_index", id="test_id", body={"doc": {}, "doc_as_upsert": True}
    )


@patch("core_lib.services.search.impl.open_search_service.get_search_client")
def test_search(mock_get_search_client):
    mock_get_search_client.return_value.search.return_value = "search_response"
    assert search("test_index", {}) == "search_response"


@patch("core_lib.services.search.impl.open_search_service.open_search_boto_client")
@patch("core_lib.services.search.impl.open_search_service.get_search_domain_name")
def test_is_domain_processing_changes(
    mock_get_search_domain_name, mock_open_search_boto_client
):
    mock_get_search_domain_name.return_value = "test_domain"
    mock_open_search_boto_client.describe_domain.return_value = {
        "DomainStatus": {"Processing": True}
    }
    assert is_domain_processing_changes() == True
    mock_open_search_boto_client.describe_domain.assert_called_once_with(
        DomainName="test_domain"
    )


@patch("core_lib.services.search.impl.open_search_service.get_search_domain_url")
@patch("core_lib.services.search.impl.open_search_service.get_es_aws_auth")
@patch("core_lib.services.search.impl.open_search_service.requests_util.post")
def test_enable_audit_logs(mock_post, mock_get_es_aws_auth, mock_get_search_domain_url):
    mock_get_search_domain_url.return_value = "test_url"
    mock_get_es_aws_auth.return_value = MagicMock(spec=AWS4Auth)
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {}
    mock_post.return_value = mock_response
    enable_audit_logs()
    mock_post.assert_called_once()


@patch("core_lib.services.search.impl.open_search_service.boto3.Session")
def test_get_es_aws_auth(mock_session):
    mock_credentials = MagicMock()
    mock_credentials.access_key = "test_access_key"
    mock_credentials.secret_key = "test_secret_key"
    mock_credentials.token = "test_token"
    mock_session.return_value.get_credentials.return_value = mock_credentials
    mock_session.return_value.region_name = "test_region"
    assert isinstance(get_es_aws_auth(), AWS4Auth)


@patch("core_lib.services.search.impl.open_search_service.get_search_domain_url")
@patch("core_lib.services.search.impl.open_search_service.get_es_aws_auth")
@patch("core_lib.services.search.impl.open_search_service.requests_util.post")
@patch(
    "core_lib.services.search.impl.open_search_service.get_lambda_roles_by_function_role_tag"
)
def test_assign_access(
    mock_get_lambda_roles_by_function_role_tag,
    mock_post,
    mock_get_es_aws_auth,
    mock_get_search_domain_url,
):
    mock_get_search_domain_url.return_value = "test_url"
    mock_get_es_aws_auth.return_value = MagicMock(spec=AWS4Auth)
    mock_response = MagicMock()
    mock_response.status_code = 200
    mock_response.json.return_value = {}
    mock_post.return_value = mock_response
    mock_get_lambda_roles_by_function_role_tag.return_value = ["role1", "role2"]
    assign_access("test_role", "test_value")
    mock_post.assert_called_once()


@patch(
    "core_lib.services.search.impl.open_search_service.function_service.get_function"
)
@patch(
    "core_lib.services.search.impl.open_search_service.resource_service.get_lambda_resources_by_function_role"
)
def test_get_lambda_roles_by_function_role_tag(
    mock_get_lambda_resources_by_function_role, mock_get_function
):
    mock_get_lambda_resources_by_function_role.return_value = {
        "resource_arns": ["arn1", "arn2"],
        "pagination_token": None,
    }
    mock_get_function.return_value = {"Configuration": {"Role": "test_role"}}
    assert get_lambda_roles_by_function_role_tag("test_value") == [
        "test_role",
        "test_role",
    ]
    mock_get_lambda_resources_by_function_role.assert_called()
    mock_get_function.assert_called()
