from unittest.mock import patch

from core_lib.services.resource.impl import resource_staging_api_service


@patch('core_lib.services.resource.impl.resource_staging_api_service.resource_staging_api_client')
@patch('core_lib.services.resource.impl.resource_staging_api_service.get_non_null_kwargs')
def test_get_resources(mock_get_non_null_kwargs, mock_resource_staging_api_client):
    # Arrange
    test_resource_arns = ['arn1', 'arn2']
    mock_resource_staging_api_client.get_resources.return_value = {
        'PaginationToken': 'test-pagination-token',
        'ResourceTagMappingList': [{'ResourceARN': 'arn1'}, {'ResourceARN': 'arn2'}]
    }

    # Act
    result = resource_staging_api_service.get_resources()

    # Assert
    assert result == {
        'pagination_token': 'test-pagination-token',
        'resource_arns': test_resource_arns
    }
    mock_get_non_null_kwargs.assert_called_once()
    mock_resource_staging_api_client.get_resources.assert_called_once_with(
        **mock_get_non_null_kwargs.return_value
    )


@patch('core_lib.services.resource.impl.resource_staging_api_service.get_resources')
def test_get_lambda_resources_by_function_role(mock_get_resources):
    # Arrange
    test_function_role_tag_value = 'test-function-role'
    mock_get_resources.return_value = {
        'pagination_token': 'test-pagination-token',
        'resource_arns': ['arn1', 'arn2']
    }

    # Act
    result = resource_staging_api_service.get_lambda_resources_by_function_role(
        function_role_tag_value=test_function_role_tag_value,
        pagination_token='test-pagination-token'
    )

    # Assert
    assert result == {
        'pagination_token': 'test-pagination-token',
        'resource_arns': ['arn1', 'arn2']
    }
    mock_get_resources.assert_called_once_with(
        TagFilters=[{'Key': 'function_role', 'Values': [test_function_role_tag_value]}],
        ResourceTypeFilters=['lambda:function'],
        PaginationToken='test-pagination-token'
    )
