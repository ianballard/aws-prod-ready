from unittest.mock import patch

from core_lib.services.parameter.impl.ssm_service import get_parameter_value
from core_lib.services.parameter.parameter_service import ParameterName


@patch("core_lib.services.parameter.impl.ssm_service.ssm_client")
@patch("core_lib.services.parameter.impl.ssm_service.ssm_client_replica_region")
@patch("core_lib.services.parameter.impl.ssm_service.os.getenv")
def test_get_parameter_value(
    mock_getenv, mock_ssm_client_replica_region, mock_ssm_client
):
    # Arrange
    test_param_name = ParameterName.DB_TABLE
    test_param_value = "test_param_value"
    mock_ssm_client.get_parameter.return_value = {
        "Parameter": {"Value": test_param_value}
    }
    mock_getenv.return_value = "test-region"

    # Act
    result = get_parameter_value(test_param_name, region="test-region")

    # Assert
    assert result == test_param_value
    mock_ssm_client.get_parameter.assert_called_once_with(Name=test_param_name.value)
