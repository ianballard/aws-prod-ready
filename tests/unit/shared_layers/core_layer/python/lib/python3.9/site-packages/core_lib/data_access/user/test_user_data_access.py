from unittest.mock import patch

from core_lib.data_access.impl.dynamodb.user.user_dynamodb_repository import (
    UserDynamoDBRepository,
)
from core_lib.data_access.user.user_data_access import (
    find_user_by_id,
    delete_user_by_id,
    create_user,
    update_user,
)


@patch.object(UserDynamoDBRepository, "find_user_by_id")
def test_find_user_by_id(mock_find_user_by_id):
    _id = "test_id"
    projection_expression = "test_expression"
    find_user_by_id(_id, projection_expression)
    mock_find_user_by_id.assert_called_once_with(
        _id=_id, projection_expression=projection_expression
    )


@patch.object(UserDynamoDBRepository, "delete_user_by_id")
def test_delete_user_by_id(mock_delete_user_by_id):
    _id = "test_id"
    delete_user_by_id(_id)
    mock_delete_user_by_id.assert_called_once_with(_id=_id)


@patch.object(UserDynamoDBRepository, "create_user")
def test_create_user(mock_create_user):
    user = {"name": "test_name"}
    create_user(user)
    mock_create_user.assert_called_once_with(user=user)


@patch.object(UserDynamoDBRepository, "update_user")
def test_update_user(mock_update_user):
    _id = "test_id"
    updates = {"name": "new_name"}
    update_user(_id, updates)
    mock_update_user.assert_called_once_with(_id=_id, updates=updates)
