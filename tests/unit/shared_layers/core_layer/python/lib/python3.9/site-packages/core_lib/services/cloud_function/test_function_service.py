from unittest.mock import patch

from core_lib.services.cloud_function import function_service

list_functions_response = {"Functions": ["Function1", "Function2"]}
get_function_response = {"Function": "Function1"}
add_permission_response = {"Statement": "Success"}


@patch("core_lib.services.cloud_function.function_service.FUNCTION_SERVICE_IMPL")
def test_list_functions(mock_function_service_impl):
    mock_function_service_impl.list_functions.return_value = list_functions_response

    # Call the function
    response = function_service.list_functions()

    # Assert the function call
    mock_function_service_impl.list_functions.assert_called_once()

    # Assert the response
    assert response == list_functions_response


@patch("core_lib.services.cloud_function.function_service.FUNCTION_SERVICE_IMPL")
def test_get_function(mock_function_service_impl):
    mock_function_service_impl.get_function.return_value = get_function_response

    # Call the function
    response = function_service.get_function(FunctionName="Function1")

    # Assert the function call
    mock_function_service_impl.get_function.assert_called_once_with(
        FunctionName="Function1"
    )

    # Assert the response
    assert response == get_function_response


@patch("core_lib.services.cloud_function.function_service.FUNCTION_SERVICE_IMPL")
def test_add_invoke_permission(mock_function_service_impl):
    mock_function_service_impl.add_invoke_permission.return_value = (
        add_permission_response
    )

    # Call the function
    response = function_service.add_invoke_permission(
        FunctionName="Function1", StatementId="Statement1"
    )

    # Assert the function call
    mock_function_service_impl.add_invoke_permission.assert_called_once_with(
        FunctionName="Function1", StatementId="Statement1"
    )

    # Assert the response
    assert response == add_permission_response
