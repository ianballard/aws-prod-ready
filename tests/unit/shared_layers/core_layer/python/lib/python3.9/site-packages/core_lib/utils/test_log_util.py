import logging
from unittest.mock import patch
from core_lib.utils import log_util


@patch.object(
    log_util, "get_current_utc_datetime_iso", return_value="2023-06-04T12:00:00Z"
)
@patch.object(log_util, "safe_get_thread_attribute", return_value="principle")
@patch("builtins.print")
def test_log_function_call(mock_print, _, __):
    @log_util.log_function_call
    def test_func(a, b):
        return a + b

    test_func(1, 2)
    expected_message = {
        "utc_datetime_iso": "2023-06-04T12:00:00Z",
        "log_type": "APP_ACCESS_LOG",
        "event_type": "FUNCTION_CALL",
        "principle": "principle",
        "function": "test_func",
        "args": (1, 2),
        "kwargs": {},
    }
    mock_print.assert_called_once_with(expected_message)


@patch.object(logging.Logger, "info")
def test_log_info(mock_info):
    log_util.log_info("info message")
    mock_info.assert_called_once_with("info message")


@patch.object(logging.Logger, "warning")
def test_log_warning(mock_warning):
    log_util.log_warning("warning message")
    mock_warning.assert_called_once_with("warning message")


@patch.object(logging.Logger, "error")
def test_log_error(mock_error):
    log_util.log_error("error message")
    mock_error.assert_called_once_with("error message")


@patch.object(logging.Logger, "exception")
def test_log_exception(mock_exception):
    log_util.log_exception("exception message")
    mock_exception.assert_called_once_with("exception message")


@patch.object(
    log_util, "get_current_utc_datetime_iso", return_value="2023-06-04T12:00:00Z"
)
@patch.object(log_util, "safe_get_thread_attribute", return_value=None)
@patch("builtins.print")
@patch("traceback.format_exc", return_value="stack trace")
def test_log_unexpected_exception(_, mock_print, __, ___):
    exception = Exception("Test exception")
    log_util.log_unexpected_exception(exception)
    expected_message = {
        "utc_datetime_iso": "2023-06-04T12:00:00Z",
        "log_type": "APP_ERROR_LOG",
        "event_type": "UNEXPECTED_EXCEPTION",
        "principle": None,
        "error_message": "Test exception",
        "error_stack_trace": "stack trace",
        "lambda_event": None,
        "lambda_context": None,
    }
    mock_print.assert_called_once_with(expected_message)
