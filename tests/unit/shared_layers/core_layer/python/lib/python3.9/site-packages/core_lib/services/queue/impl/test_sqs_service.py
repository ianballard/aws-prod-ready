from unittest.mock import patch

from core_lib.services.parameter.parameter_service import ParameterName
from core_lib.services.queue.impl import sqs_service


@patch('core_lib.services.queue.impl.sqs_service.sqs_client')
@patch('core_lib.services.queue.impl.sqs_service.sqs_client_replica_region')
@patch('core_lib.services.queue.impl.sqs_service.get_parameter_value')
def test_get_auth_event_queue_url(mock_get_parameter_value, mock_sqs_client_replica_region, mock_sqs_client):
    # Arrange
    test_queue_url = 'test-queue-url'
    mock_get_parameter_value.return_value = test_queue_url

    # Act
    result = sqs_service.get_auth_event_queue_url()

    # Assert
    assert result == test_queue_url
    mock_get_parameter_value.assert_called_once_with(
        parameter_name=ParameterName.AUTH_EVENT_QUEUE_URL, region=None
    )


@patch('core_lib.services.queue.impl.sqs_service.SQS_CLIENT')
@patch('core_lib.services.queue.impl.sqs_service.log_info')
@patch('core_lib.services.queue.impl.sqs_service.log_warning')
def test_send_message_to_queue(mock_log_warning, mock_log_info, mock_sqs_client):
    # Arrange
    test_message = {'key': 'value'}
    test_queue_url = 'test-queue-url'
    test_region = 'test-region'
    test_delay_seconds = 10

    # Act
    sqs_service.send_message_to_queue(
        message=test_message,
        queue_url=test_queue_url,
        region=test_region,
        delay_seconds=test_delay_seconds
    )

    # Assert
    mock_sqs_client.get.assert_called_once_with(test_region)
    mock_sqs_client.get.return_value.send_message.assert_called_once_with(
        QueueUrl=test_queue_url,
        DelaySeconds=test_delay_seconds,
        MessageBody='{"key": "value"}'
    )
    mock_log_info.assert_called_once_with(
        f'sending message: {{"key": "value"}} to {test_queue_url} in region {test_region}'
    )
    mock_log_warning.assert_not_called()
