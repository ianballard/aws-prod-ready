from unittest.mock import patch, MagicMock

from core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model import (
    build_new_user_association,
    UserAssociationDynamoDBItem,
    USER_ASSOCIATION_ENTITY_TYPE,
)


@patch(
    "core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model.build_formatted_user_id"
)
@patch(
    "core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model.build_new_item"
)
def test_build_new_user_association(mock_build_new_item, mock_build_formatted_user_id):
    user_association = {"user_a_id": "test_id_1", "user_b_id": "test_id_2"}
    mock_build_new_item.return_value = MagicMock()
    mock_build_formatted_user_id.side_effect = ["formatted_id_1", "formatted_id_2"]

    user = build_new_user_association(user_association)

    mock_build_new_item.assert_called_once_with(
        {
            "pk": "formatted_id_1",
            "sk": "formatted_id_2",
            "entity_type": USER_ASSOCIATION_ENTITY_TYPE.value,
        }
    )

    assert user is mock_build_new_item.return_value


@patch(
    "core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model."
    "get_user_association_json_schema_validator"
)
@patch(
    "core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model."
    "get_user_association_allowed_updates_json_schema_validator"
)
def test_user_association_dynamodb_item_initialization(
    mock_get_user_association_allowed_updates_json_schema_validator,
    mock_get_user_association_json_schema_validator,
):
    mock_get_user_association_json_schema_validator.return_value = MagicMock()
    mock_get_user_association_allowed_updates_json_schema_validator.return_value = (
        MagicMock()
    )

    user_association_item = UserAssociationDynamoDBItem()

    mock_get_user_association_json_schema_validator.assert_called_once()
    mock_get_user_association_allowed_updates_json_schema_validator.assert_called_once()

    assert (
        user_association_item.put_item_validator
        is mock_get_user_association_json_schema_validator.return_value
    )
    assert (
        user_association_item.update_item_validator
        is mock_get_user_association_allowed_updates_json_schema_validator.return_value
    )
