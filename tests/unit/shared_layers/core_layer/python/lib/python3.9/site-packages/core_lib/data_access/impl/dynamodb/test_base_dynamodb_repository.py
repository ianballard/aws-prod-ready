from unittest.mock import patch, MagicMock

from core_lib.data_access.impl.dynamodb.base_dynamodb_data_model import DynamoDBItem
from core_lib.data_access.impl.dynamodb.base_dynamodb_repository import (
    BaseDynamoDBRepository,
)
from core_lib.services.database.impl import dynamodb_service


@patch.object(dynamodb_service, "put_item")
@patch.object(dynamodb_service, "get_item")
@patch.object(dynamodb_service, "update_item")
@patch.object(dynamodb_service, "delete_item")
@patch.object(dynamodb_service, "query_items")
@patch.object(dynamodb_service, "batch_get_item")
def test_base_dynamodb_repository(
    mock_batch_get_item,
    mock_query_items,
    mock_delete_item,
    mock_update_item,
    mock_get_item,
    mock_put_item,
):
    mock_data_model = MagicMock(spec=DynamoDBItem)
    repo = BaseDynamoDBRepository(data_model=mock_data_model)

    test_item = {"id": "test", "value": "test"}
    mock_put_item.return_value = {"Attributes": test_item}
    assert repo.put_item(test_item) == {"Attributes": test_item}
    mock_put_item.assert_called_once_with(item=test_item, data_model=mock_data_model)

    test_key = {"id": "test"}
    mock_get_item.return_value = test_item
    assert repo.get_item(test_key, "value") == test_item
    mock_get_item.assert_called_once_with(Key=test_key, ProjectionExpression="value")

    test_updates = {"value": "updated_test"}
    mock_update_item.return_value = {"Attributes": {**test_item, **test_updates}}
    assert repo.update_item(test_key, test_updates) == {
        "Attributes": {**test_item, **test_updates}
    }
    mock_update_item.assert_called_once_with(
        key=test_key, updates=test_updates, data_model=mock_data_model
    )

    mock_delete_item.return_value = {}
    assert repo.delete_item(test_key) == {}
    mock_delete_item.assert_called_once_with(Key=test_key)

    test_query = {
        "TableName": "test",
        "KeyConditionExpression": "id = :v_id",
        "ExpressionAttributeValues": {":v_id": "test"},
    }
    mock_query_items.return_value = {"Items": [test_item]}
    assert repo.query(**test_query) == {"Items": [test_item]}
    mock_query_items.assert_called_once_with(**test_query)

    test_batch_get_item = {"RequestItems": {"test": {"Keys": [test_key]}}}
    mock_batch_get_item.return_value = {"Responses": {"test": [test_item]}}
    assert repo.batch_get_item(**test_batch_get_item) == {
        "Responses": {"test": [test_item]}
    }
    mock_batch_get_item.assert_called_once_with(**test_batch_get_item)
