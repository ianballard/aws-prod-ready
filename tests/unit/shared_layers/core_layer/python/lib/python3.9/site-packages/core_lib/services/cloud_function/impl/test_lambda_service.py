# Test for list_functions
from unittest.mock import patch


from core_lib.services.cloud_function.impl.lambda_service import (
    create_database_event_lambda_trigger,
    add_invoke_permission,
    get_function,
    list_functions,
)


@patch(
    "core_lib.services.cloud_function.impl.lambda_service.lambda_client.list_functions"
)
def test_list_functions(mock_list_functions):
    mock_list_functions.return_value = {"Functions": [{"FunctionName": "mock_func"}]}
    response = list_functions()
    assert response == {"Functions": [{"FunctionName": "mock_func"}]}
    mock_list_functions.assert_called_once()


@patch(
    "core_lib.services.cloud_function.impl.lambda_service.lambda_client.get_function"
)
def test_get_function(mock_get_function):
    mock_get_function.return_value = {"Configuration": {"FunctionName": "mock_func"}}
    response = get_function(FunctionName="mock_func")
    assert response == {"Configuration": {"FunctionName": "mock_func"}}
    mock_get_function.assert_called_once_with(FunctionName="mock_func")


@patch(
    "core_lib.services.cloud_function.impl.lambda_service.lambda_client.add_permission"
)
def test_add_invoke_permission(mock_add_permission):
    mock_add_permission.return_value = {}
    assert (
        add_invoke_permission("mock_function", "mock_statement", "mock_principle")
        is None
    )
    mock_add_permission.assert_called_once_with(
        FunctionName="mock_function",
        StatementId="mock_statement",
        Action="lambda:InvokeFunction",
        Principal="mock_principle",
    )


@patch(
    "core_lib.services.cloud_function.impl.lambda_service.lambda_client.create_event_source_mapping"
)
@patch(
    "core_lib.services.cloud_function.impl.lambda_service.dynamodb_service.describe_table"
)
@patch(
    "core_lib.services.cloud_function.impl.lambda_service.dynamodb_service.db_table_name",
    return_value="mock_table_name",
)
def test_create_database_event_lambda_trigger(
    mock_db_table_name, mock_describe_table, mock_create_event_source_mapping
):
    mock_describe_table.return_value = {"Table": {"LatestStreamArn": "mock_stream_arn"}}
    mock_create_event_source_mapping.return_value = {"UUID": "mock_uuid"}
    response = create_database_event_lambda_trigger("mock_function_arn")
    assert response == {"UUID": "mock_uuid"}
    mock_create_event_source_mapping.assert_called_once_with(
        EventSourceArn="mock_stream_arn",
        FunctionName="mock_function_arn",
        StartingPosition="LATEST",
        BatchSize=5,
        Enabled=True,
    )
