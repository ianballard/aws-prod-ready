import json
from unittest.mock import MagicMock, patch

from core_lib.utils.cloudformation_custom_resource_util import send_cfn_response


def test_send_cfn_response_success():
    event = {
        "ResponseURL": "https://example.com/response",
        "StackId": "stack-id",
        "RequestId": "request-id",
        "LogicalResourceId": "logical-resource-id",
    }
    context = MagicMock(log_stream_name="log-stream-name")
    response_status = "SUCCESS"
    response_data = {"Key": "Value"}

    expected_response_body = json.dumps(
        {
            "Status": response_status,
            "Reason": f"See the details in CloudWatch Log Stream: {context.log_stream_name}",
            "PhysicalResourceId": context.log_stream_name,
            "StackId": event["StackId"],
            "RequestId": event["RequestId"],
            "LogicalResourceId": event["LogicalResourceId"],
            "NoEcho": False,
            "Data": response_data,
        }
    )

    with patch("core_lib.utils.requests_util.put") as mock_put, patch(
        "core_lib.utils.log_util.log_info"
    ) as mock_log_info:
        send_cfn_response(event, context, response_status, response_data)

        mock_put.assert_called_once_with(
            event["ResponseURL"],
            data=expected_response_body,
            headers={
                "Content-Type": "",
                "Content-Length": str(len(expected_response_body)),
            },
            timeout=3,
        )
        mock_log_info.assert_not_called()


def test_send_cfn_response_failure_missing_response_url():
    event = {
        "StackId": "stack-id",
        "RequestId": "request-id",
        "LogicalResourceId": "logical-resource-id",
    }
    context = MagicMock(log_stream_name="log-stream-name")
    response_status = "SUCCESS"
    response_data = {"Key": "Value"}

    with patch("core_lib.utils.requests_util.put") as mock_put, patch(
        "core_lib.utils.log_util.log_info"
    ):
        send_cfn_response(event, context, response_status, response_data)

        mock_put.assert_not_called()


def test_send_cfn_response_failure_exception():
    event = {
        "ResponseURL": "https://example.com/response",
        "StackId": "stack-id",
        "RequestId": "request-id",
        "LogicalResourceId": "logical-resource-id",
    }
    context = MagicMock(log_stream_name="log-stream-name")
    response_status = "SUCCESS"
    response_data = {"Key": "Value"}

    with patch("core_lib.utils.requests_util.put") as mock_put, patch(
        "core_lib.utils.log_util.log_info"
    ):
        mock_put.side_effect = Exception("Error sending response")

        send_cfn_response(event, context, response_status, response_data)

        mock_put.assert_called_once()
