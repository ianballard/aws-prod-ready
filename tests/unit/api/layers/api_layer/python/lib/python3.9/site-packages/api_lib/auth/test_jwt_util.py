import pytest
from unittest.mock import patch
import jwt
from core_lib.services.auth.auth_service import get_audience, get_known_public_keys
from api_lib.auth.jwt_util import get_decoded_jwt, jwk_to_pem


@patch("api_lib.auth.jwt_util.get_known_public_keys")
@patch("api_lib.auth.jwt_util.jwt.decode")
@patch("api_lib.auth.jwt_util.get_audience")
def test_get_decoded_jwt(
    get_audience_mock, jwt_decode_mock, get_known_public_keys_mock
):
    get_audience_mock.return_value = "test-audience"
    get_known_public_keys_mock.return_value = [
        {
            "kid": "test-kid",
            "e": "AQAB",
            "n": "some-long-string",
        }
    ]
    jwt_decode_mock.return_value = {
        "aud": "test-audience",
        "exp": 2000000000,  # Some future timestamp
    }

    header = {"kid": "test-kid"}
    token = jwt.encode(
        {"aud": "test-audience"}, "secret", algorithm="HS256", headers=header
    )

    result = get_decoded_jwt(token, is_access_token=False, check_exp_claim=True)

    assert result == {"aud": "test-audience", "exp": 2000000000}


def test_jwk_to_pem():
    jwk = {
        "kid": "test-kid",
        "e": "AQAB",
        "n": "vrKIm5IYQa4TA4rpwMvxetYx8QvhFyJLu3Sgf3HhjsM",
    }
    pem = jwk_to_pem(jwk)
    assert "-----BEGIN PUBLIC KEY-----" in pem
    assert "-----END PUBLIC KEY-----" in pem
