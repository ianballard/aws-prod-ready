import json
from unittest.mock import patch

from api_lib.auth.authorization import (
    Authorization,
    ActionType,
    UserResourceAuthorizationModel,
    UserGroup,
    SearchResourceAuthorizationModel,
    authorize,
    ResourceAccess,
    is_self_target,
    is_admin,
)
from api_lib.request.api_request import ApiRequest


# Test helper functions
def test_is_self_target():
    assert is_self_target("test", "test") is True
    assert is_self_target("test1", "test2") is False


def test_is_admin():
    assert is_admin([UserGroup.Admin]) is True
    assert is_admin([UserGroup.User]) is False
    assert is_admin([UserGroup.SuperAdmin]) is True


# Test authorize decorator
@patch("api_lib.auth.authorization.get_decoded_jwt")
@patch("api_lib.auth.authorization.user_association_data_access.query_associated_users")
def test_authorize(query_associated_users, get_decoded_jwt_mock):
    query_associated_users.return_value = {"Items": ["foo"]}
    decoded_jwt = {
        "cognito:groups": ["Admin"],
        "profile": "test-profile",
    }
    get_decoded_jwt_mock.return_value = decoded_jwt

    _api_request = ApiRequest(
        {
            "headers": {"Authorization": "Bearer jwt-token"},
            "body": json.dumps({}),
            "pathParameters": {"id": "test-profile"},
        }
    )
    authorization = Authorization(
        resource_access=ResourceAccess.AccessUser,
        action_type=ActionType.Get,
        user_group=UserGroup.Admin,
    )

    @authorize(authorization)
    def test_func(api_request=_api_request):
        return {"status": "success"}

    response = test_func(_api_request)
    assert response == {"status": "success"}


# Test UserResourceAuthorizationModel
@patch("api_lib.auth.authorization.user_association_data_access.query_associated_users")
def test_user_resource_authorization_model_is_get_allowed(query_associated_users_mock):
    query_associated_users_mock.return_value = {"Items": ["test"]}

    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=["Admin"],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.Get,
    )

    assert model.is_get_allowed() is True


@patch("api_lib.auth.authorization.user_data_access.find_user_by_id")
def test_user_resource_authorization_model_is_associate_allowed(find_user_by_id_mock):
    find_user_by_id_mock.return_value = {"profile": "test-profile"}

    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=["Admin"],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.Associate,
    )

    assert model.is_associate_allowed() is True


def test_user_resource_authorization_model_is_create_allowed():
    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=[UserGroup.Admin],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.Create,
    )

    assert model.is_create_allowed() is True


def test_user_resource_authorization_model_is_list_allowed():
    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=[UserGroup.User],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.List,
    )

    assert model.is_list_allowed() is True


def test_user_resource_authorization_model_is_update_allowed():
    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=[UserGroup.User],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.Update,
    )

    assert model.is_update_allowed() is True


def test_user_resource_authorization_model_is_delete_allowed():
    model = UserResourceAuthorizationModel(
        principle="test-id",
        user_groups=[UserGroup.User],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.Delete,
    )

    assert model.is_delete_allowed() is True


# Test SearchResourceAuthorizationModel
def test_search_resource_authorization_model_is_list_allowed():
    model = SearchResourceAuthorizationModel(
        principle="test-id",
        user_groups=[UserGroup.User],
        target_resource_id_holder={"id": "test-id"},
        action_type=ActionType.List,
    )

    assert model.is_list_allowed() is True
