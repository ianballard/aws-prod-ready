AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Log Management Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  backupRegion:
    Description: "Backup Region"
    Type: String
  coreLayer:
    Description: "Core Library Layer"
    Type: String
  securityGroup:
    Description: "Lambda VPC security group"
    Type: String
    Default: ""
  vpcSubnetIds:
    Description: "Lambda VPC Subnets"
    Type: CommaDelimitedList
    Default: ""
  enableVPC:
    Description: "Is VPC enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

Conditions:
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]

Globals:
  Function:
    MemorySize: 256
    Timeout: 900
    Runtime: python3.9
    Tracing: Active
    Environment:
      Variables:
        "stage": !Ref "stage"
        "region": !Ref AWS::Region
    Layers:
      - !Ref coreLayer
    VpcConfig: !If
      - isVPCEnabled
      - SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds: !Ref vpcSubnetIds
      - !Ref AWS::NoValue

Resources:

  AccessLogHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/log_management/app_access_log_management
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
      Handler: app_access_logger.log_access_event

  ErrorLogHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/log_management/app_error_log_management
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
      Handler: app_error_logger.log_error_event

  EnableLogGroupSubscriptionFilters:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: async/log_management/subscription_filter_management
      Handler: enable_subscription_filters.handle_new_log_group_created
      Environment:
        Variables:
          "APP_ACCESS_LOGGER_FUNCTION_ARN": !GetAtt AccessLogHandler.Arn
          "APP_ERROR_LOGGER_FUNCTION_ARN": !GetAtt ErrorLogHandler.Arn
      Role: !GetAtt EnableLogGroupSubscriptionFiltersRole.Arn

  EnableLogGroupSubscriptionFiltersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  LogGroupCreationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger Lambda function when a new CloudWatch log group is created
      EventPattern:
        source:
          - aws.logs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - logs.amazonaws.com
          eventName:
            - CreateLogGroup
      State: ENABLED
      Targets:
        - Arn: !GetAtt EnableLogGroupSubscriptionFilters.Arn
          Id: LogGroupLambdaFunctionTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EnableLogGroupSubscriptionFilters.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LogGroupCreationEventRule.Arn
