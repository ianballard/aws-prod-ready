AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Open Search Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  replicaRegion:
    Description: "Replica Region"
    Type: String
  securityGroup:
    Description: "Lambda VPC security group"
    Type: String
    Default: ""
  vpcSubnetIds:
    Description: "Lambda VPC Subnets"
    Type: CommaDelimitedList
    Default: ""
  enableVPC:
    Description: "Is VPC enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  coreLayer:
    Description: "Core Library Layer"
    Type: String

Conditions:
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]

Globals:
  Function:
    MemorySize: 256
    Timeout: 60
    Runtime: python3.9
    Environment:
      Variables:
        "stage": !Ref "stage"
        "region": !Ref AWS::Region
    Tracing: Active
    Layers:
      - !Ref coreLayer
    VpcConfig: !If
      - isVPCEnabled
      - SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds: !Ref vpcSubnetIds
      - !Ref AWS::NoValue

Resources:

  OpenSearchKmsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: KMS key for OpenSearch domain encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow OpenSearch Service to Use the Key
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: '*'

  OpenSearchDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
      EngineVersion: OpenSearch_2.3
      ClusterConfig:
        InstanceType: "t3.small.search"
        InstanceCount: 1
        DedicatedMasterEnabled: false
#        ZoneAwarenessEnabled: true
#        ZoneAwarenessConfig:
#          AvailabilityZoneCount: 2
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 10
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: !Ref OpenSearchKmsKey
      NodeToNodeEncryptionOptions:
        Enabled: true
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:*:${AWS::AccountId}:domain/*"
      AdvancedSecurityOptions:
        Enabled: true
        SAMLOptions:
          Enabled: false
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !GetAtt OpenSearchAdminIAMRole.Arn
      DomainEndpointOptions:
        EnforceHTTPS: true
      VPCOptions: !If
        - isVPCEnabled
        - SecurityGroupIds:
            - !Ref securityGroup
          SubnetIds: !Ref vpcSubnetIds
        - !Ref AWS::NoValue
      LogPublishingOptions:
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupIndexSlow.Arn
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupSearchSlow.Arn
          Enabled: true
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupAudit.Arn
          Enabled: true
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt LogGroupApplication.Arn
          Enabled: true

  LogGroupIndexSlow:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 365

  LogGroupSearchSlow:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 365

  LogGroupAudit:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 365

  LogGroupApplication:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 365

  OpenSearchLogsResourcePolicy:
    Type: "AWS::Logs::ResourcePolicy"
    Properties:
      PolicyName: !Sub "OpenSearchLogsResourcePolicy-${stage}-${AWS::Region}"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowOpenSearchToCreateLogStreams",
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action":[
                "logs:PutLogEvents",
                "logs:CreateLogStream"
              ],
              "Resource": [
                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupIndexSlow}:*",
                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupSearchSlow}:*",
                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupAudit}:*",
                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupApplication}:*"
              ]
            }
          ]
        }

  DomainUrlParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "OPEN_SEARCH_DOMAIN_URL"
      Type: "String"
      Value: !GetAtt OpenSearchDomain.DomainEndpoint

  DomainNameParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "OPEN_SEARCH_DOMAIN_NAME"
      Type: "String"
      Value: !Ref OpenSearchDomain

  OpenSearchAdminIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/ResourceGroupsandTagEditorReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SearchAdminAssignReadAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/search_admin
      Role: !GetAtt OpenSearchAdminIAMRole.Arn
      Handler: search_admin_functions.assign_read_access
      Tags:
        function_role: search_write_function

  ExecuteSearchAdminAssignReadAccessFunction:
    Type: Custom::ExecuteSearchAdminAssignReadAccessFunction
    Properties:
      ServiceToken: !GetAtt SearchAdminAssignReadAccessFunction.Arn
      OpenSearchClusterArn: !GetAtt OpenSearchDomain.Arn

  SearchAdminAssignWriteAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/search_admin
      Role: !GetAtt OpenSearchAdminIAMRole.Arn
      Handler: search_admin_functions.assign_write_access
      Tags:
        function_role: search_write_function

  ExecuteSearchAdminAssignWriteAccessFunction:
    Type: Custom::ExecuteSearchAdminAssignWriteAccessFunction
    Properties:
      ServiceToken: !GetAtt SearchAdminAssignWriteAccessFunction.Arn
      OpenSearchClusterArn: !GetAtt OpenSearchDomain.Arn

  SearchAdminEnableLoggingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/search_admin
      Role: !GetAtt OpenSearchAdminIAMRole.Arn
      Handler: search_admin_functions.enable_audit_logs
      Tags:
        function_role: search_write_function

  ExecuteSearchAdminEnableLoggingFunction:
    Type: Custom::ExecuteSearchAdminEnableLoggingFunction
    Properties:
      ServiceToken: !GetAtt SearchAdminEnableLoggingFunction.Arn
      OpenSearchClusterArn: !GetAtt OpenSearchDomain.Arn

  SearchAdminCreateUserIndexFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/search_admin
      Role: !GetAtt OpenSearchAdminIAMRole.Arn
      Handler: search_admin_functions.create_user_index

  ExecuteSearchAdminCreateUserIndexFunction:
    Type: Custom::ExecuteSearchAdminCreateUserIndexFunction
    Properties:
      ServiceToken: !GetAtt SearchAdminCreateUserIndexFunction.Arn
      OpenSearchClusterArn: !GetAtt OpenSearchDomain.Arn

Outputs:
  OpenSearchDomainEndpoint:
    Value: !GetAtt OpenSearchDomain.DomainEndpoint