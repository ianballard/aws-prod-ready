from uuid import uuid4

from boto3.dynamodb.conditions import Key

from core_lib.data_models.user.impl.dynamodb.user_dynamodb_data_model import (
    USER_ENTITY_TYPE,
)
from core_lib.services.database.database_service import (
    get_db_item,
    delete_db_item,
    put_db_item,
    update_db_item,
    query_db_items,
)
from core_lib.services.database.impl.dynamodb_service import (
    build_new_item,
    build_update_expression_and_values,
)


def build_user_item_key(_id: str) -> dict:
    return {"pk": USER_ENTITY_TYPE.value, "sk": f"{USER_ENTITY_TYPE.value}-{_id}"}


def build_new_user(user):
    user["pk"] = USER_ENTITY_TYPE.value
    user["sk"] = f"{USER_ENTITY_TYPE.value}-{user['username']}"
    user["entity_type"] = USER_ENTITY_TYPE.value
    return build_new_item(user)


def find_user_by_id(_id: str):
    return get_db_item(Key=build_user_item_key(_id=_id))


def delete_user_by_id(_id: str):
    return delete_db_item(Key=build_user_item_key(_id=_id))


def create_user(user):
    return put_db_item(Item=build_new_user(user))


def update_user(_id: str, updates: dict):
    key = build_user_item_key(_id=_id)
    update_expression, expression_attribute_values = build_update_expression_and_values(
        updates
    )
    return update_db_item(
        Key=key,
        UpdateExpression=update_expression,
        ExpressionAttributeValues=expression_attribute_values,
        ReturnValues="ALL_NEW",
    )


def query_all_users():
    return query_db_items(
        KeyConditionExpression=Key("pk").eq(USER_ENTITY_TYPE.value),
        ProjectionExpression="pk, sk",
    )


def query_related_users(user_a_id: str, user_b_id: str = None):
    key_condition_expression = Key("pk").eq(user_a_id)

    if user_b_id is not None:
        key_condition_expression = key_condition_expression & Key("sk").eq(user_b_id)

    else:
        key_condition_expression = key_condition_expression & Key("sk").begins_with(
            USER_ENTITY_TYPE.value
        )

    return query_db_items(KeyConditionExpression=key_condition_expression)
