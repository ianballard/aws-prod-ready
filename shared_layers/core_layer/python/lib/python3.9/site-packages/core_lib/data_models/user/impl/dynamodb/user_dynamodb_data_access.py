from boto3.dynamodb.conditions import Key

from core_lib.data_models.user.impl.dynamodb.user_dynamodb_data_model import (
    USER_ENTITY_TYPE,
    USER_ASSOCIATION_ENTITY_TYPE,
)
from core_lib.services.database.database_service import (
    get_db_item,
    put_db_item,
    update_db_item,
    query_db_items,
    batch_get_item,
    soft_delete_db_item,
)
from core_lib.services.database.impl.dynamodb_service import (
    build_new_item,
    build_update_expression_and_values,
    db_table_name,
)


def build_formatted_user_id(user_id: str):
    return f"{USER_ENTITY_TYPE.value}-{user_id}"


def build_user_item_key(_id: str) -> dict:
    return {"pk": USER_ENTITY_TYPE.value, "sk": f"{build_formatted_user_id(_id)}"}


def build_new_user(user):
    user["pk"] = USER_ENTITY_TYPE.value
    user["sk"] = build_formatted_user_id(user["profile"])
    user["entity_type"] = USER_ENTITY_TYPE.value
    return build_new_item(user)


def build_user_association(user_a_id: str, user_b_id: str):
    user = {
        "pk": build_formatted_user_id(user_a_id),
        "sk": build_formatted_user_id(user_b_id),
        "entity_type": USER_ASSOCIATION_ENTITY_TYPE.value,
    }
    return build_new_item(user)


def find_user_by_id(_id: str):
    return get_db_item(Key=build_user_item_key(_id=_id))


def delete_user_by_id(_id: str):
    return soft_delete_db_item(Key=build_user_item_key(_id=_id))


def create_user(user):
    return put_db_item(Item=build_new_user(user))


def update_user(_id: str, updates: dict):
    key = build_user_item_key(_id=_id)
    update_expression, expression_attribute_values = build_update_expression_and_values(
        updates
    )
    return update_db_item(
        Key=key,
        UpdateExpression=update_expression,
        ExpressionAttributeValues=expression_attribute_values,
        ReturnValues="ALL_NEW",
    )


def query_all_users():
    return query_db_items(
        KeyConditionExpression=Key("pk").eq(USER_ENTITY_TYPE.value),
        ProjectionExpression="pk, sk",
    )


def query_associated_users(user_a_id: str, user_b_id: str = None):
    key_condition_expression = Key("pk").eq(build_formatted_user_id(user_a_id))

    if user_b_id is not None:
        key_condition_expression = key_condition_expression & Key("sk").eq(
            build_formatted_user_id(user_b_id)
        )

    else:
        key_condition_expression = key_condition_expression & Key("sk").begins_with(
            USER_ENTITY_TYPE.value
        )

    return query_db_items(KeyConditionExpression=key_condition_expression)


def associate_users(user_a_id: str, user_b_id):
    return put_db_item(
        Item=build_user_association(user_a_id=user_a_id, user_b_id=user_b_id)
    )


def query_associated_users_with_profiles(user_a_id: str, user_b_id: str = None):
    association_users_response = query_associated_users(user_a_id, user_b_id)
    items = association_users_response.get("Items", [])
    last_evaluated_key = association_users_response.get("LastEvaluatedKey")

    item_keys = [{"pk": USER_ENTITY_TYPE.value, "sk": item.get("sk")} for item in items]
    item_request = {db_table_name(): {"Keys": item_keys}}
    user_profiles = batch_get_item(RequestItems=item_request)

    return {"last_evaluated_key": last_evaluated_key, "items": user_profiles}
