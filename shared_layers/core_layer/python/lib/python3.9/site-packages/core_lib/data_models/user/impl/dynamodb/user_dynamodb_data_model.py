from core_lib.data_models.model import EntityType
from core_lib.services.database.impl.dynamodb_service import build_new_item
from core_lib.utils.json_schema_util import (
    get_schema_validator,
    JSON_SCHEMA_2020_12_DRAFT,
    STRING,
    UUID_STRING,
    EMAIL_STRING,
    BOOLEAN,
    ISO_DATE_TIME_FORMAT,
    ACTIVE_STATUS,
    INACTIVE_STATUS,
    UUID_PATTERN,
    validate,
    NULLABLE_UUID_STRING,
)

USER_ENTITY_TYPE = EntityType.User
USER_ASSOCIATION_ENTITY_TYPE = EntityType.UserAssociation

USER_DATA_MODEL_SCHEMA = {
    **JSON_SCHEMA_2020_12_DRAFT,
    "title": "UserDataModel",
    "type": "object",
    "properties": {
        "pk": {"const": EntityType.User.value},
        "sk": {
            "type": "string",
            "pattern": f"^{EntityType.User.value}-{UUID_PATTERN}$",
        },
        "entity_type": {"const": EntityType.User.value},
        "profile": UUID_STRING,
        "username": STRING,
        "first_name": STRING,
        "last_name": STRING,
        "email": EMAIL_STRING,
        "entity_status": {"enum": [ACTIVE_STATUS, INACTIVE_STATUS]},
        "origin_region": STRING,
        "created_by": NULLABLE_UUID_STRING,
        "updated_by": UUID_STRING,
        "created_date_time": ISO_DATE_TIME_FORMAT,
        "updated_date_time": ISO_DATE_TIME_FORMAT,
        "is_deleted": BOOLEAN,
    },
    "required": [
        "pk",
        "sk",
        "entity_type",
        "profile",
        "username",
        "first_name",
        "last_name",
        "email",
        "entity_status",
        "origin_region",
        "created_date_time",
    ],
    "additionalProperties": False,
}

USER_JSON_SCHEMA_VALIDATOR = None


USER_ALLOWED_UPDATES_SCHEMA = {
    **JSON_SCHEMA_2020_12_DRAFT,
    "title": "UserAllowedUpdatesDataModel",
    "type": "object",
    "properties": {
        "entity_status": {"enum": [ACTIVE_STATUS, INACTIVE_STATUS]},
        "is_deleted": BOOLEAN,
    },
    "additionalProperties": False,
}

USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR = None


def get_user_json_schema_validator():
    global USER_JSON_SCHEMA_VALIDATOR

    if USER_JSON_SCHEMA_VALIDATOR is None:
        USER_JSON_SCHEMA_VALIDATOR = get_schema_validator(schema=USER_DATA_MODEL_SCHEMA)

    return USER_JSON_SCHEMA_VALIDATOR


def get_user_allowed_updates_json_schema_validator():
    global USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR

    if USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR is None:
        USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR = get_schema_validator(
            schema=USER_ALLOWED_UPDATES_SCHEMA
        )

    return USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR


def build_formatted_user_id(user_id: str):
    return f"{USER_ENTITY_TYPE.value}-{user_id}"


def build_user_item_key(_id: str) -> dict:
    return {"pk": USER_ENTITY_TYPE.value, "sk": f"{build_formatted_user_id(_id)}"}


def build_new_user(user):
    user["pk"] = USER_ENTITY_TYPE.value
    user["sk"] = build_formatted_user_id(user["profile"])
    user["entity_type"] = USER_ENTITY_TYPE.value
    return build_new_item(user)


@validate({"user": get_user_json_schema_validator()})
def validate_user(user: dict):
    return user


@validate({"updates": get_user_allowed_updates_json_schema_validator()})
def validate_user_updates(updates: dict):
    return updates


def build_user_association(user_a_id: str, user_b_id: str):
    user = {
        "pk": build_formatted_user_id(user_a_id),
        "sk": build_formatted_user_id(user_b_id),
        "entity_type": USER_ASSOCIATION_ENTITY_TYPE.value,
    }
    return build_new_item(user)
