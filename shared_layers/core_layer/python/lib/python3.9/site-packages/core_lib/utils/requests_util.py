import functools
import time
import uuid

import requests
from core_lib.utils.date_time_util import get_current_utc_datetime_iso
from core_lib.utils.thread_util import safe_get_thread_attribute


def request(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        request_id = str(uuid.uuid4())
        principle = safe_get_thread_attribute("principle")
        print(
            {
                "utc_datetime_iso": get_current_utc_datetime_iso(),
                "log_type": "HTTP_REQUEST",
                "event_type": "Request",
                "request_id": request_id,
                "principle": principle,
                "function": func.__name__,
                "args": args,
                "kwargs": kwargs,
            }
        )
        start_time = time.time()
        response = func(*args, **kwargs)
        end_time = time.time()

        status_code = response.status_code
        message = {
            "utc_datetime_iso": get_current_utc_datetime_iso(),
            "log_type": "HTTP_REQUEST",
            "event_type": "Response",
            "request_id": request_id,
            "principle": principle,
            "function": func.__name__,
            "args": args,
            "kwargs": kwargs,
            "request_time": end_time - start_time,
            "status_code": response.status_code,
        }

        if status_code >= 400:
            try:
                response_body = response.json()
            except Exception:
                response_body = response.content

            message["response_body"] = response_body
            raise Exception(message)

        print(message)

        return response

    return wrapper


TIMEOUT = 3


@request
def head(*args, **kwargs):
    return requests.head(*args, **kwargs, timeout=TIMEOUT)


@request
def get(*args, **kwargs):
    return requests.get(*args, **kwargs, timeout=TIMEOUT)


@request
def post(*args, **kwargs):
    return requests.post(*args, **kwargs, timeout=TIMEOUT)


@request
def put(*args, **kwargs):
    return requests.put(*args, **kwargs, timeout=TIMEOUT)


@request
def patch(*args, **kwargs):
    return requests.patch(*args, **kwargs, timeout=TIMEOUT)


@request
def delete(*args, **kwargs):
    return requests.delete(*args, **kwargs, timeout=TIMEOUT)
