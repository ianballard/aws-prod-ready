import jsonschema

JSON_SCHEMA_2020_12_DRAFT = {"$schema": "https://json-schema.org/draft/2020-12/schema"}

STRING = {
    "type": "string",
}

NULLABLE_STRING = {"type": ["string", "null"]}

BOOLEAN = {
    "type": "boolean",
}

NON_NEGATIVE_NUMBER = {"type": "number", "minimum": 0}

NUMBER = {
    "type": "number",
}

UUID_PATTERN = (
    "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
)

UUID_STRING = {
    "type": "string",
    "format": "uuid",
    "examples": [
        "ad642ae8-7b4b-4d9a-a163-52a3781baa52",
        "0bbf6253-75ee-4f3a-8ee5-d2512db391ed",
    ],
}

NULLABLE_UUID_STRING = {
    "type": ["string", "null"],
    "examples": [
        "ad642ae8-7b4b-4d9a-a163-52a3781baa52",
        "0bbf6253-75ee-4f3a-8ee5-d2512db391ed",
    ],
}

EMAIL_STRING = {
    "type": "string",
    # https://www.geeksforgeeks.org/check-if-email-address-valid-or-not-in-python/
    "pattern": "^\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b$",
    "examples": ["someone@yourwebsite.com", "person+plusaddress@something.com"],
}

YYYY_MM_DD_DATE_REGEX_TEMPLATE = "(?:[1-9]\\d{{3}}{delimiter}(?:(?:0[1-9]|1[0-2]){delimiter}(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2]){delimiter}(?:29|30)|(?:0[13578]|1[02]){delimiter}31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00){delimiter}02{delimiter}29)"
YYYY_MM_DD_DATE_WITH_DASHES_REGEX = YYYY_MM_DD_DATE_REGEX_TEMPLATE.format(delimiter="-")

HH_MM_SS_TIME_24HR_REGEX = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d"
OPTIONAL_DECIMAL_TIME_REGEX = "(\\.\\d+){0,1}"

ISO_DATE_TIME_FORMAT_PATTERN = f"^{YYYY_MM_DD_DATE_WITH_DASHES_REGEX}T{HH_MM_SS_TIME_24HR_REGEX}{OPTIONAL_DECIMAL_TIME_REGEX}$"
ISO_DATE_TIME_FORMAT = {
    "type": "string",
    "pattern": ISO_DATE_TIME_FORMAT_PATTERN,
    "examples": [
        "2021-01-13T18:27:43.672321",
        "2022-08-12T11:47:30.099999",
        "2022-08-12T11:47:30",
    ],
}

ACTIVE_STATUS = "ACTIVE"
INACTIVE_STATUS = "INACTIVE"


def validate_json(json: dict, validator):
    validator.validate(instance=json)


def get_schema_validator(schema: dict):
    cls = jsonschema.validators.validator_for(schema=schema)
    cls.check_schema(schema=schema)
    return cls(schema=schema, format_checker=jsonschema.FormatChecker())


def validate(validations: dict):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for kwarg, validator in validations.items():
                json_to_validate = kwargs[kwarg]
                validate_json(json=json_to_validate, validator=validator)

            return func(*args, **kwargs)

        return wrapper

    return decorator
