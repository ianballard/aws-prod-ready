import json
from threading import current_thread

from aws_xray_sdk.core import patch_all
from aws_xray_sdk.core import xray_recorder

from core_lib.utils.log_util import log_info, log_unexpected_exception

patch_all()


def lambda_handler():
    def decorator(func):
        def wrapper(event, context):
            try:
                log_info(event)

                current_thread().__setattr__("event", event)
                current_thread().__setattr__("context", context)

                try:
                    # Capture metadata and annotations
                    xray_recorder.begin_subsegment("ProcessingEvent")
                    xray_recorder.current_subsegment().put_metadata(
                        "event", event, "ProcessingEvent"
                    )
                    xray_recorder.current_subsegment().put_annotation(
                        "EventSize", len(json.dumps(event))
                    )
                except Exception as e:
                    log_unexpected_exception(e)

                response = func(event)

                try:
                    xray_recorder.end_subsegment()
                except Exception as e:
                    log_unexpected_exception(e)

                return response

            except Exception as e:
                log_unexpected_exception(e)
                raise e

        return wrapper

    return decorator
