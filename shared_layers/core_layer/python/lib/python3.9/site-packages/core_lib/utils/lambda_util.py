from threading import current_thread

import boto3

from core_lib.utils.log_util import log_info, log_unexpected_exception
lambda_client = boto3.client("lambda")


def lambda_handler():
    def decorator(func):
        def wrapper(event, context):
            try:
                log_info(event)

                current_thread().__setattr__("event", event)
                current_thread().__setattr__("context", context)

                return func(event)

            except Exception as e:
                log_unexpected_exception(e)
                raise e

        return wrapper

    return decorator


def add_invoke_permission(function_name: str, statement_id: str, principle: str):
    try:
        lambda_client.add_permission(
            FunctionName=function_name,
            StatementId=statement_id,
            Action="lambda:InvokeFunction",
            Principal=principle,
        )
    except lambda_client.exceptions.ResourceConflictException as e:
        pass
    except Exception as e:
        log_unexpected_exception(e)
