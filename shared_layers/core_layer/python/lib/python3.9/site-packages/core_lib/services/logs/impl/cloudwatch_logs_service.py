import base64
import gzip
import time

from core_lib.utils.log_util import log_info, log_unexpected_exception, log_warning
import json
import boto3
from core_lib.services.cloud_function import function_service

logs_client = boto3.client("logs")


def put_subscription_filters(
    functions: list, filter_name: str, destination_arn: str, event_filter: str
):
    function_resources = [
        {
            "log": f"/aws/lambda/{function.get('FunctionName')}",
            "arn": function.get("FunctionArn"),
        }
        for function in functions
    ]

    function_service.add_invoke_permission(
        function_name=destination_arn,
        statement_id="cloudwatch-logs-invoke",
        principle="logs.amazonaws.com",
    )

    for function in function_resources:
        arn = function.get("arn")
        log = function.get("log")

        if arn == destination_arn:
            continue

        subscription_filters = describe_subscription_filters(
            log_group=log, filter_name=filter_name
        )

        if subscription_filters is None:
            continue

        access_log_filter = next(iter(subscription_filters), None)
        if (
            access_log_filter
            and access_log_filter.get("destinationArn") == destination_arn
        ):
            continue

        put_subscription_filter(
            log_group=log,
            filter_name=filter_name,
            destination_arn=destination_arn,
            filter_pattern=event_filter,
        )


def put_subscription_filters_on_all_function_logs(
    filter_name: str, destination_arn: str, event_filter: str
):
    list_functions_response = function_service.list_functions()
    next_marker = list_functions_response.get("NextMarker")

    put_subscription_filters(
        functions=list_functions_response.get("Functions"),
        filter_name=filter_name,
        destination_arn=destination_arn,
        event_filter=event_filter,
    )

    while next_marker:
        list_functions_response = function_service.list_functions(Marker=next_marker)
        put_subscription_filters(
            functions=list_functions_response.get("Functions"),
            filter_name=filter_name,
            destination_arn=destination_arn,
            event_filter=event_filter,
        )
        next_marker = list_functions_response.get("NextMarker")


def log_subscribed_log_events(event):
    compressed_data = base64.b64decode(event["awslogs"]["data"])
    decompressed_data = gzip.decompress(compressed_data)

    # Convert the decompressed data to a JSON object
    log_data = json.loads(decompressed_data)

    # Extract log events from the log data
    log_events = log_data["logEvents"]

    # Process each log event
    for log_event in log_events:
        try:
            print(json.loads(json.dumps(log_event.get("message"))))
        except Exception as e:
            log_unexpected_exception(e)


def describe_subscription_filters(log_group: str, filter_name: str, retry_count=0):
    try:
        log_info(f"{log_group} describe_subscription_filters: {filter_name}")
        subscription_filters = logs_client.describe_subscription_filters(
            logGroupName=log_group, filterNamePrefix=filter_name, limit=1
        ).get("subscriptionFilters", [])
        return subscription_filters
    except logs_client.exceptions.ResourceNotFoundException:
        return
    except logs_client.exceptions.ThrottlingException as te:
        if retry_count < 3:
            log_warning(f"{te} - retrying after 1 second")
            time.sleep(1)
            return describe_subscription_filters(
                log_group=log_group,
                filter_name=filter_name,
                retry_count=retry_count + 1,
            )
        else:
            log_unexpected_exception(te)
            return
    except Exception as e:
        log_unexpected_exception(e)
        return


def put_subscription_filter(
    log_group: str, filter_name: str, destination_arn: str, filter_pattern: str
):
    try:
        log_info(
            f"{log_group} put_subscription_filter: {filter_name} to {destination_arn}"
        )
        logs_client.put_subscription_filter(
            logGroupName=log_group,
            filterName=filter_name,
            filterPattern=filter_pattern,
            destinationArn=destination_arn,
        )
    except logs_client.exceptions.ResourceNotFoundException:
        return
    except Exception as e:
        log_unexpected_exception(e)
        return
