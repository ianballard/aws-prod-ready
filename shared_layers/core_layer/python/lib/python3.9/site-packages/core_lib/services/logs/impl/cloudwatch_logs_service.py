import base64
import gzip
import json
from datetime import datetime, timedelta

import boto3

from core_lib.utils.log_util import log_info, log_unexpected_exception

logs_client = boto3.client("logs")


def log_subscribed_log_events(event):
    compressed_data = base64.b64decode(event["awslogs"]["data"])
    decompressed_data = gzip.decompress(compressed_data)

    # Convert the decompressed data to a JSON object
    log_data = json.loads(decompressed_data)

    # Extract log events from the log data
    log_events = log_data["logEvents"]

    # Process each log event
    for log_event in log_events:
        try:
            print(json.loads(json.dumps(log_event.get("message"))))
        except Exception as e:
            log_unexpected_exception(e)


def put_subscription_filter(
    log_group: str, filter_name: str, destination_arn: str, filter_pattern: str
):
    try:
        log_info(
            f"{log_group} put_subscription_filter: {filter_name} to {destination_arn}"
        )
        logs_client.put_subscription_filter(
            logGroupName=log_group,
            filterName=filter_name,
            filterPattern=filter_pattern,
            destinationArn=destination_arn,
        )
    except logs_client.exceptions.ResourceNotFoundException:
        return
    except Exception as e:
        log_unexpected_exception(e)
        return


def encrypt_log_group(log_group_name: str, kms_key_arn: str):
    try:
        kms_key_args = {"logGroupName": log_group_name, "kmsKeyId": kms_key_arn}
        log_info(f"{log_group_name} associate-kms-key: {kms_key_arn}")
        return logs_client.associate_kms_key(**kms_key_args)
    except Exception as e:
        log_unexpected_exception(e)
        return


def put_retention_policy(log_group_name: str, retention_in_days: int):
    try:
        log_info(f"{log_group_name} put-retention-policy: {retention_in_days} days")
        return logs_client.put_retention_policy(
            logGroupName=log_group_name, retentionInDays=retention_in_days
        )
    except Exception as e:
        log_unexpected_exception(e)
        return


def create_export_task(
    log_group_name: str,
    destination_bucket: str,
    end_date_time: datetime,
    days_to_include: int = 1,
):
    try:
        log_info(f"creating s3 export task for log group: {log_group_name}")
        export_task = logs_client.create_export_task(
            taskName=f"s3-export-task-cw-logs-{end_date_time.isoformat()}",
            logGroupName=log_group_name,
            fromTime=int((end_date_time - timedelta(days=days_to_include)).timestamp())
            * 1000,
            to=int(end_date_time.timestamp()) * 1000,
            destination=destination_bucket,
            destinationPrefix=log_group_name,
        )
        return export_task
    except Exception as e:
        log_unexpected_exception(e)
        return


def get_lambda_function_name(arn):
    return arn.split(":")[-1]


def build_log_group_name_from_arn(arn: str):
    return f"/aws/lambda/{get_lambda_function_name(arn)}"
