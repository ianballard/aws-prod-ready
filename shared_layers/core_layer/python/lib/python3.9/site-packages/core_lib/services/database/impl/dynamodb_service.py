import boto3
from boto3.dynamodb.types import TypeDeserializer

from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)
from core_lib.utils.args_util import get_non_null_kwargs
from core_lib.utils.date_time_util import get_current_utc_datetime_iso
from core_lib.utils.thread_util import safe_get_thread_attribute

dynamodb_resource = boto3.resource("dynamodb")
dynamodb_client = boto3.client("dynamodb")

DB_TABLE = None


def db_table():
    global DB_TABLE

    if DB_TABLE is None:
        DB_TABLE = dynamodb_resource.Table(get_parameter_value(ParameterName.DB_TABLE))

    return DB_TABLE


def dynamodb_json_to_json(dynamodb_json):
    deserializer = TypeDeserializer()
    normal_json = {
        key: deserializer.deserialize(record) for key, record in dynamodb_json.items()
    }
    return normal_json


def put_item(**kwargs):
    db_response = db_table().put_item(**get_non_null_kwargs(**kwargs))
    return db_response


def query_items(**kwargs):
    db_response = db_table().query(**get_non_null_kwargs(**kwargs))
    return db_response


def get_item(**kwargs):
    db_response = db_table().get_item(**get_non_null_kwargs(**kwargs))
    return db_response.get("Item")


def update_item(**kwargs):
    db_response = db_table().update_item(**get_non_null_kwargs(**kwargs))
    return db_response


def delete_item(**kwargs):
    db_response = db_table().delete_item(**get_non_null_kwargs(**kwargs))
    return db_response


def build_new_item(item: dict):
    item["created_by"] = safe_get_thread_attribute("principle")
    item["created_date_time"] = get_current_utc_datetime_iso()

    item.pop("updated_by", None)
    item.pop("updated_date_time", None)
    return item


def build_update_expression_and_values(updates: dict):
    update_expression = build_update_expression(list(updates.keys()))
    expression_attribute_values = build_update_expression_attribute_values(updates)
    return update_expression, expression_attribute_values


def build_update_expression(attributes):
    if "created_by" in attributes:
        attributes.remove("created_by")
    if "created_date_time" in attributes:
        attributes.remove("created_date_time")

    if "updated_by" not in attributes:
        attributes.append("updated_by")
    if "updated_date_time" not in attributes:
        attributes.append("updated_date_time")

    return (
        f"set {', '.join([f'{attribute}=:v_{attribute}' for attribute in attributes])}"
    )


def build_update_expression_attribute_values(values: dict):
    values.pop("created_by", None)
    values.pop("created_date_time", None)

    converted_values = {f":v_{attribute}": value for attribute, value in values.items()}

    converted_values[":v_updated_by"] = safe_get_thread_attribute("principle")
    converted_values[":v_updated_date_time"] = get_current_utc_datetime_iso()

    return converted_values
