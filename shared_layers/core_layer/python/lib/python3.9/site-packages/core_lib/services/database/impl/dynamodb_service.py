import os

import boto3
from boto3.dynamodb.types import TypeDeserializer

from core_lib.data_access.impl.dynamodb.base_dynamodb_data_model import (
    DynamoDBItem,
)
from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)
from core_lib.utils.args_util import get_non_null_kwargs
from core_lib.utils.date_time_util import get_current_utc_datetime_iso
from core_lib.utils.json_schema_util import validate_json
from core_lib.utils.log_util import log_function_call
from core_lib.utils.thread_util import safe_get_thread_attribute

dynamodb_resource = boto3.resource("dynamodb")
dynamodb_client = boto3.client("dynamodb")

DB_TABLE_NAME = None
DB_TABLE = None


def db_table_name():
    global DB_TABLE_NAME

    if DB_TABLE_NAME is None:
        DB_TABLE_NAME = get_parameter_value(parameter_name=ParameterName.DB_TABLE)

    return DB_TABLE_NAME


def db_table():
    global DB_TABLE

    if DB_TABLE is None:
        DB_TABLE = dynamodb_resource.Table(db_table_name())

    return DB_TABLE


def dynamodb_json_to_json(dynamodb_json):
    deserializer = TypeDeserializer()
    normal_json = {
        key: deserializer.deserialize(record) for key, record in dynamodb_json.items()
    }
    return normal_json


def put_item(item: dict, data_model: DynamoDBItem):
    new_item = data_model.build_new_item(item)
    validate_json(json=new_item, validator=data_model.put_item_validator)
    db_response = dynamodb_put_item(item=new_item)
    return db_response


def query_items(**kwargs):
    db_response = dynamodb_query(**get_non_null_kwargs(**kwargs))
    return {
        "Items": db_response.get("Items", []),
        "Count": db_response.get("Count"),
        "ScannedCount": db_response.get("ScannedCount"),
        "LastEvaluatedKey": db_response.get("LastEvaluatedKey"),
    }


def get_item(**kwargs):
    db_response = dynamodb_get_item(**get_non_null_kwargs(**kwargs))
    return db_response.get("Item")


def update_item(key: dict, updates: dict, data_model: DynamoDBItem):
    validate_json(json=updates, validator=data_model.update_item_validator)
    update_expression, expression_attribute_values = build_update_expression_and_values(
        updates
    )
    db_response = dynamodb_update_item(
        Key=key,
        UpdateExpression=update_expression,
        ExpressionAttributeValues=expression_attribute_values,
        ReturnValues="ALL_NEW",
    )
    return db_response


def delete_item(**kwargs):
    db_response = dynamodb_delete_item(**get_non_null_kwargs(**kwargs))
    return db_response


def batch_get_item(**kwargs):
    db_response = dynamodb_batch_get_item(**get_non_null_kwargs(**kwargs))
    return db_response.get("Responses", {}).get(db_table_name(), [])


def build_new_item(item: dict):
    item["created_by"] = safe_get_thread_attribute("principle")
    item["created_date_time"] = get_current_utc_datetime_iso()
    item["origin_region"] = os.getenv("region")

    item.pop("updated_by", None)
    item.pop("updated_date_time", None)
    return item


def build_update_expression_and_values(updates: dict):
    update_expression = build_update_expression(list(updates.keys()))
    expression_attribute_values = build_update_expression_attribute_values(updates)
    return update_expression, expression_attribute_values


def build_update_expression(attributes):
    if "created_by" in attributes:
        attributes.remove("created_by")
    if "created_date_time" in attributes:
        attributes.remove("created_date_time")

    if "updated_by" not in attributes:
        attributes.append("updated_by")
    if "updated_date_time" not in attributes:
        attributes.append("updated_date_time")

    if "origin_region" not in attributes:
        attributes.append("origin_region")

    return (
        f"set {', '.join([f'{attribute}=:v_{attribute}' for attribute in attributes])}"
    )


def build_update_expression_attribute_values(values: dict):
    values.pop("created_by", None)
    values.pop("created_date_time", None)

    converted_values = {f":v_{attribute}": value for attribute, value in values.items()}

    converted_values[":v_updated_by"] = safe_get_thread_attribute("principle")
    converted_values[":v_updated_date_time"] = get_current_utc_datetime_iso()
    converted_values[":v_origin_region"] = os.getenv("region")

    return converted_values


def describe_table(table_name: str):
    return dynamodb_client.describe_table(TableName=table_name)


@log_function_call
def dynamodb_put_item(**kwargs):
    return db_table().put_item(**kwargs)


@log_function_call
def dynamodb_get_item(**kwargs):
    return db_table().get_item(**kwargs)


@log_function_call
def dynamodb_query(**kwargs):
    return db_table().query(**kwargs)


@log_function_call
def dynamodb_update_item(**kwargs):
    return db_table().update_item(**kwargs)


@log_function_call
def dynamodb_delete_item(**kwargs):
    return db_table().delete_item(**kwargs)


@log_function_call
def dynamodb_batch_get_item(**kwargs):
    return dynamodb_resource.batch_get_item(**kwargs)


def health_check():
    return dynamodb_client.describe_table(
        TableName=db_table_name()
    )

