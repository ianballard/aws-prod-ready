import json
import os

import boto3
from opensearchpy import OpenSearch, RequestsHttpConnection
from requests_aws4auth import AWS4Auth

from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)
from core_lib.services.secrets import secrets_service

OPEN_SEARCH_DOMAIN_URL = None
OPEN_SEARCH_CLIENT = None
OPEN_SEARCH_SECRET = None


def get_open_search_domain_url():
    global OPEN_SEARCH_DOMAIN_URL

    if OPEN_SEARCH_DOMAIN_URL is None:
        OPEN_SEARCH_DOMAIN_URL = get_parameter_value(
            parameter_name=ParameterName.OPEN_SEARCH_DOMAIN_URL
        )

    return OPEN_SEARCH_DOMAIN_URL


def get_open_search_secret():
    global OPEN_SEARCH_SECRET

    if OPEN_SEARCH_SECRET is None:
        secret_value = secrets_service.get_secret_value("opensearch-secret").get(
            "SecretString"
        )
        OPEN_SEARCH_SECRET = json.loads(secret_value)

    return OPEN_SEARCH_SECRET


def get_open_search_client():
    region = os.getenv("region")
    service = "es"
    credentials = boto3.Session().get_credentials()
    awsauth = AWS4Auth(
        credentials.access_key,
        credentials.secret_key,
        region,
        service,
        session_token=credentials.token,
    )

    return OpenSearch(
        hosts=[{"host": get_open_search_domain_url(), "port": 443}],
        http_auth=awsauth,
        use_ssl=True,
        verify_certs=True,
        connection_class=RequestsHttpConnection,
    )


COMMON_SETTINGS = {
    "analysis": {
        "analyzer": {
            "autocomplete_analyzer": {
                "type": "custom",
                "tokenizer": "uax_url_email",
                "filter": ["lowercase", "autocomplete_edge_gram"],
            }
        },
        "filter": {
            "autocomplete_edge_gram": {
                "type": "edge_ngram",
                "min_gram": 3,
                "max_gram": 255,
            }
        },
    }
}

AUTOCOMPLETE_MAPPING = {
    "type": "completion",
    "analyzer": "autocomplete_analyzer",
    "search_analyzer": "autocomplete_analyzer",
}


def get_client_info():
    return get_open_search_client().info()


def create_index(index_name: str, index_body: dict):
    return get_open_search_client().indices.create(index=index_name, body=index_body)


def upsert(index_name: str, _id: str, doc: dict):
    return get_open_search_client().update(index=index_name, id=_id, body={"doc": doc, "doc_as_upsert": True})


def search(index_name: str, query: dict):
    return get_open_search_client().search(index=index_name, body=query)
