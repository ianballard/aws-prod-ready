from core_lib.services.database.impl import dynamodb_service
from core_lib.utils.args_util import get_non_null_kwargs
from core_lib.utils.log_util import log_unexpected_exception
import boto3

lambda_client = boto3.client("lambda")


def list_functions(**kwargs):
    return lambda_client.list_functions(**get_non_null_kwargs(**kwargs))


def get_function(**kwargs):
    return lambda_client.get_function(**get_non_null_kwargs(**kwargs))


def add_invoke_permission(function_name: str, statement_id: str, principle: str):
    try:
        lambda_client.add_permission(
            FunctionName=function_name,
            StatementId=statement_id,
            Action="lambda:InvokeFunction",
            Principal=principle,
        )
    except lambda_client.exceptions.ResourceConflictException:
        pass
    except Exception as e:
        log_unexpected_exception(e)


def create_database_event_lambda_trigger(function_arn: str):
    try:
        table = dynamodb_service.describe_table(
            table_name=dynamodb_service.db_table_name()
        )
        latest_stream_arn = table["Table"]["LatestStreamArn"]

        return lambda_client.create_event_source_mapping(
            EventSourceArn=latest_stream_arn,
            FunctionName=function_arn,
            StartingPosition="LATEST",
            BatchSize=5,
            Enabled=True,
        )

    except lambda_client.exceptions.ResourceConflictException:
        pass
    except Exception as e:
        log_unexpected_exception(e)
