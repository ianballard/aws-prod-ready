from core_lib.services.search.impl.open_search_service import (
    create_index,
    upsert,
    COMMON_SETTINGS,
    AUTOCOMPLETE_MAPPING,
    search,
    get_search_domain_url,
    get_es_aws_auth,
)
from core_lib.utils import requests_util
from core_lib.utils.log_util import log_unexpected_exception, log_error

USER_INDEX_NAME = "user_v1"


def create_user_index():
    try:
        index_name = USER_INDEX_NAME
        index_body = {
            "settings": COMMON_SETTINGS,
            "mappings": {
                "properties": {
                    "username": AUTOCOMPLETE_MAPPING,
                    "profile": {"type": "text"},
                    "email": AUTOCOMPLETE_MAPPING,
                    "first_name": AUTOCOMPLETE_MAPPING,
                    "last_name": AUTOCOMPLETE_MAPPING,
                }
            },
        }
        return create_index(index_name=index_name, index_body=index_body)
    except Exception as e:
        log_unexpected_exception(e)


def upsert_user_doc(user: dict):
    _id = user.get("profile")
    doc = {
        "username": user["username"].lower(),
        "profile": user["profile"].lower(),
        "email": user["email"].lower(),
        "first_name": user["first_name"].lower(),
        "last_name": user["last_name"].lower(),
    }
    return upsert(index_name=USER_INDEX_NAME, _id=_id, doc=doc)


def search_users(search_str: str):
    query = {
        "suggest": {
            "username_suggestion": {
                "prefix": search_str,
                "completion": {"field": "username"},
            },
            "first_name_suggestion": {
                "prefix": search_str,
                "completion": {"field": "first_name"},
            },
            "last_name_suggestion": {
                "prefix": search_str,
                "completion": {"field": "last_name"},
            },
            "email_suggestion": {
                "prefix": search_str,
                "completion": {"field": "email"},
            },
        }
    }

    response = search(index_name=USER_INDEX_NAME, query=query)

    all_suggestions = []
    for suggestion in response.get("suggest", {}).values():
        options = next(iter(suggestion)).get("options")
        if options:
            all_suggestions.extend(options)

    unique_suggestions = {}

    for option in all_suggestions:
        _id = option["_id"]
        if _id not in unique_suggestions:
            user = option["_source"]
            unique_suggestions[_id] = {
                "profile": user["profile"],
                "username": user["username"],
            }

    return list(unique_suggestions.values())


def user_index_exists():
    try:
        url = f"https://{get_search_domain_url()}/{USER_INDEX_NAME}"
        awsauth = get_es_aws_auth()

        try:
            response = requests_util.head(url, auth=awsauth)
        except Exception as e:
            log_error(e)
            return False

        if response.status_code == 200:
            return True
        elif response.status_code == 404:
            return False
        else:
            raise Exception(
                f"Unable to determine if {USER_INDEX_NAME} index exists - {response.json()}"
            )
    except Exception as e:
        log_unexpected_exception(e)
