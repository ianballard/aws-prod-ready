import base64
import hashlib
import hmac
import os

import boto3

from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)
from core_lib.utils import requests_util
from core_lib.utils.log_util import log_function_call

cognito_idp_client = boto3.client("cognito-idp")

region = os.getenv("region")
USER_POOL_ID = None
USER_POOL_CLIENT = None
KNOWN_PUBLIC_KEYS = None


def get_user_pool_id():
    global USER_POOL_ID

    if USER_POOL_ID is None:
        USER_POOL_ID = get_parameter_value(ParameterName.USER_POOL_ID)

    return USER_POOL_ID


def get_user_pool_client():
    global USER_POOL_CLIENT

    if USER_POOL_CLIENT is None:
        USER_POOL_CLIENT = get_parameter_value(ParameterName.USER_POOL_CLIENT)

    return USER_POOL_CLIENT


def get_known_public_keys():
    global KNOWN_PUBLIC_KEYS

    if KNOWN_PUBLIC_KEYS is None:
        jwks_url = f"https://cognito-idp.{region}.amazonaws.com/{get_user_pool_id()}/.well-known/jwks.json"
        jwks_response = requests_util.get(jwks_url, timeout=3)
        jwks = jwks_response.json()
        KNOWN_PUBLIC_KEYS = jwks["keys"]

    return KNOWN_PUBLIC_KEYS


def get_app_client_secret():
    client_response = cognito_idp_client.describe_user_pool_client(
        UserPoolId=get_user_pool_id(), ClientId=get_user_pool_client()
    )
    return client_response.get("UserPoolClient", {}).get("ClientSecret")


def get_cognito_client_secret_hash(username):
    message = bytes(username + get_user_pool_client(), "utf-8")
    key = bytes(get_app_client_secret(), "utf-8")
    return base64.b64encode(
        hmac.new(key, message, digestmod=hashlib.sha256).digest()
    ).decode()


def sign_up(
    profile: str,
    username: str,
    email: str,
    password: str,
    first_name: str,
    last_name: str,
):
    username = username.lower()
    email = email.lower()
    client_id = get_user_pool_client()
    cognito_idp_client.sign_up(
        ClientId=client_id,
        SecretHash=get_cognito_client_secret_hash(username),
        Username=username,
        Password=password,
        UserAttributes=[
            {"Name": "profile", "Value": profile},
            {"Name": "email", "Value": email},
            {"Name": "given_name", "Value": first_name},
            {"Name": "family_name", "Value": last_name},
        ],
    )

    return {"username": username, "profile": profile}


def confirm_sign_up(username: str, code: str):
    cognito_idp_client.admin_enable_user(
        UserPoolId=get_user_pool_id(), Username=username
    )

    cognito_idp_client.confirm_sign_up(
        ClientId=get_user_pool_client(),
        Username=username,
        ConfirmationCode=code,
        SecretHash=get_cognito_client_secret_hash(username),
    )

    cognito_idp_client.admin_update_user_attributes(
        UserPoolId=get_user_pool_id(),
        Username=username,
        UserAttributes=[{"Name": "email_verified", "Value": "true"}],
    )


@log_function_call
def initiate_user_password_auth(username: str, password: str):
    auth_response = cognito_idp_client.initiate_auth(
        AuthFlow="USER_PASSWORD_AUTH",
        AuthParameters={
            "USERNAME": username,
            "PASSWORD": password,
            "SECRET_HASH": get_cognito_client_secret_hash(username),
        },
        ClientId=get_user_pool_client(),
    )
    auth_response.pop("ResponseMetadata", None)
    return auth_response


def admin_create_user(
    profile: str,
    username: str,
    email: str,
    password: str,
    first_name: str,
    last_name: str,
    suppress_message: bool = False,
    is_password_permanent: bool = False,
):
    username = username.lower()
    email = email.lower()
    user_pool_id = get_user_pool_id()

    args = {
        "UserPoolId": user_pool_id,
        "Username": username,
        "TemporaryPassword": password,
        "MessageAction": password,
        "DesiredDeliveryMediums": ["EMAIL"],
        "UserAttributes": [
            {"Name": "profile", "Value": profile},
            {"Name": "email", "Value": email},
            {"Name": "given_name", "Value": first_name},
            {"Name": "family_name", "Value": last_name},
        ],
    }

    if suppress_message:
        args["MessageAction"] = "SUPPRESS"

    cognito_idp_client.admin_create_user(**args)

    if is_password_permanent:
        cognito_idp_client.admin_set_user_password(
            UserPoolId=user_pool_id,
            Username=username,
            Password=password,
            Permanent=True,
        )


def admin_set_user_password(username: str, password: str, is_permanent: bool = False):
    return cognito_idp_client.admin_set_user_password(
        UserPoolId=get_user_pool_id(),
        Username=username,
        Password=password,
        Permanent=True if is_permanent else False,
    )


def admin_disable_user(username: str):
    return cognito_idp_client.admin_disable_user(
        UserPoolId=get_user_pool_id(), Username=username
    )


def admin_enable_user(username: str):
    return cognito_idp_client.admin_enable_user(
        UserPoolId=get_user_pool_id(), Username=username
    )


def respond_to_new_password_auth_challenge(username: str, password: str, session: str):
    secret_hash = get_cognito_client_secret_hash(username)

    auth_response = cognito_idp_client.respond_to_auth_challenge(
        ClientId=get_user_pool_client(),
        ChallengeName="NEW_PASSWORD_REQUIRED",
        Session=session,
        ChallengeResponses={
            "USERNAME": username,
            "NEW_PASSWORD": password,
            "SECRET_HASH": secret_hash,
        },
    )

    auth_response.pop("ResponseMetadata", None)
    return auth_response
