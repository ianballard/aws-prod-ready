import boto3
from core_lib.services.parameter.parameter_service import get_parameter_value, ParameterName
import json

sqs_client = boto3.client("sqs")

ACCESS_LOG_QUEUE_URL = None
ERROR_LOG_QUEUE_URL = None


def get_access_log_queue_url():
    global ACCESS_LOG_QUEUE_URL

    if ACCESS_LOG_QUEUE_URL is None:
        ACCESS_LOG_QUEUE_URL = get_parameter_value(ParameterName.ACCESS_LOG_QUEUE_URL)

    return ACCESS_LOG_QUEUE_URL


def get_error_log_queue_url():
    global ERROR_LOG_QUEUE_URL

    if ERROR_LOG_QUEUE_URL is None:
        ERROR_LOG_QUEUE_URL = get_parameter_value(ParameterName.ERROR_LOG_QUEUE_URL)

    return ERROR_LOG_QUEUE_URL


def send_message_to_queue(message, queue_url: str, delay_seconds: int = 0):
    from core_lib.utils.log_util import log_unexpected_exception, log_info

    try:

        if isinstance(message, dict):
            message = json.dumps(message, cls=json.JSONEncoder)

        log_info(f'sending message: {message} to {queue_url}')

        args = {
            "QueueUrl": queue_url,
            "DelaySeconds": delay_seconds,
            "MessageBody": message,
        }

        return sqs_client.send_message(**args)

    except Exception as e:
        log_unexpected_exception(e)


