import json
import os

import boto3
from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)
from core_lib.utils.log_util import log_warning, log_info

sqs_client = boto3.client("sqs")
sqs_client_replica_region = boto3.client("sqs", region_name=os.getenv("REPLICA_REGION"))

AUTH_EVENT_QUEUE_URL = None


def get_auth_event_queue_url(region: str = os.getenv("region")):
    global AUTH_EVENT_QUEUE_URL

    if AUTH_EVENT_QUEUE_URL is None:
        AUTH_EVENT_QUEUE_URL = get_parameter_value(
            parameter_name=ParameterName.AUTH_EVENT_QUEUE_URL, region=region
        )

    return AUTH_EVENT_QUEUE_URL


def send_message_to_queue(
    message, queue_url: str, region: str = os.getenv("region"), delay_seconds: int = 0
):

    try:
        if isinstance(message, dict):
            message = json.dumps(message, cls=json.JSONEncoder)

        log_info(f"sending message: {message} to {queue_url} in region {region}")

        args = {
            "QueueUrl": queue_url,
            "DelaySeconds": delay_seconds,
            "MessageBody": message,
        }

        client = SQS_CLIENT.get(region)
        if not client:
            log_warning(
                f"Unsupported region: {region}, supported regions: {list(SQS_CLIENT.keys())}. using default client"
            )
            client = sqs_client

        return client.send_message(**args)

    except Exception as e:
        log_unexpected_exception(e)


SQS_CLIENT = {
    os.getenv("region"): sqs_client,
    os.getenv("REPLICA_REGION"): sqs_client_replica_region,
}
