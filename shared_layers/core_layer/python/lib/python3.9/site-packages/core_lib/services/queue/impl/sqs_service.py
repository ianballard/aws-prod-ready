import json
import os

import boto3
from core_lib.services.parameter.parameter_service import (
    get_parameter_value,
    ParameterName,
)

sqs_client = boto3.client("sqs")
sqs_client_backup_region = boto3.client("sqs", region_name=os.getenv("BACKUP_REGION"))
is_vpc_enabled = os.getenv('VPC_ENABLED') == 'true'


ACCESS_LOG_QUEUE_URL = None
ERROR_LOG_QUEUE_URL = None


def get_access_log_queue_url():
    global ACCESS_LOG_QUEUE_URL

    if ACCESS_LOG_QUEUE_URL is None:
        parameter_name = ParameterName.ACCESS_LOG_QUEUE_URL_VPC if is_vpc_enabled else ParameterName.ACCESS_LOG_QUEUE_URL_NO_VPC
        ACCESS_LOG_QUEUE_URL = get_parameter_value(parameter_name=parameter_name)

    return ACCESS_LOG_QUEUE_URL


def get_error_log_queue_url():
    global ERROR_LOG_QUEUE_URL

    if ERROR_LOG_QUEUE_URL is None:
        parameter_name = ParameterName.ERROR_LOG_QUEUE_URL_VPC if is_vpc_enabled else ParameterName.ERROR_LOG_QUEUE_URL_NO_VPC
        ERROR_LOG_QUEUE_URL = get_parameter_value(parameter_name=parameter_name)

    return ERROR_LOG_QUEUE_URL


def get_auth_event_queue_url(region: str = os.getenv('region')):
    global ERROR_LOG_QUEUE_URL

    if ERROR_LOG_QUEUE_URL is None:
        parameter_name = ParameterName.AUTH_EVENT_QUEUE_URL_VPC if is_vpc_enabled else ParameterName.AUTH_EVENT_QUEUE_URL_NO_VPC
        ERROR_LOG_QUEUE_URL = get_parameter_value(parameter_name=parameter_name, region=region)

    return ERROR_LOG_QUEUE_URL


def send_message_to_queue(message, queue_url: str, region: str = os.getenv('region'), delay_seconds: int = 0):
    from core_lib.utils.log_util import log_unexpected_exception, log_info

    try:
        if isinstance(message, dict):
            message = json.dumps(message, cls=json.JSONEncoder)

        log_info(f"sending message: {message} to {queue_url}")

        args = {
            "QueueUrl": queue_url,
            "DelaySeconds": delay_seconds,
            "MessageBody": message,
        }

        client = SQS_CLIENT.get(region)
        if not client:
            raise Exception(f'Unsupported region: {region}')

        return client.send_message(**args)

    except Exception as e:
        log_unexpected_exception(e)


SQS_CLIENT = {
    os.getenv('region'): sqs_client,
    os.getenv("BACKUP_REGION"): sqs_client_backup_region
}
