from boto3.dynamodb.conditions import Key

from core_lib.data_access.impl.dynamodb.user.user_dynamodb_data_model import (
    USER_ENTITY_TYPE,
    build_formatted_user_id,
)
from core_lib.data_access.impl.dynamodb.user_association.user_association_dynamodb_data_model import (
    UserAssociationDynamoDBItem,
)
from core_lib.data_access.impl.dynamodb.base_dynamodb_repository import (
    BaseDynamoDBRepository,
)


class UserAssociationDynamoDBRepository(BaseDynamoDBRepository):
    def __init__(self):
        super().__init__(data_model=UserAssociationDynamoDBItem())

    def create_user_association(self, user_a_id: str, user_b_id):
        item = {"user_a_id": user_a_id, "user_b_id": user_b_id}
        self.put_item(item=item)

    def query_associated_users(
        self, user_a_id: str, user_b_id: str = None, projection_expression: str = None
    ):
        key_condition_expression = Key("pk").eq(build_formatted_user_id(user_a_id))

        if user_b_id is not None:
            key_condition_expression = key_condition_expression & Key("sk").eq(
                build_formatted_user_id(user_b_id)
            )

        else:
            key_condition_expression = key_condition_expression & Key("sk").begins_with(
                USER_ENTITY_TYPE.value
            )

        return self.query(
            KeyConditionExpression=key_condition_expression,
            ProjectionExpression=projection_expression,
        )

    def query_associated_users_with_profiles(
        self, user_a_id: str, user_b_id: str = None
    ):
        association_users_response = self.query_associated_users(user_a_id, user_b_id)
        items = association_users_response.get("Items", [])
        last_evaluated_key = association_users_response.get("LastEvaluatedKey")

        if not items:
            return {"last_evaluated_key": last_evaluated_key, "items": []}

        item_keys = [
            {"pk": USER_ENTITY_TYPE.value, "sk": item.get("sk")} for item in items
        ]
        item_request = {
            self.db_service.db_table_name(): {
                "Keys": item_keys,
                "ProjectionExpression": "profile,username,first_name,last_name,email,entity_status",
            }
        }
        user_profiles = self.batch_get_item(RequestItems=item_request)

        return {"last_evaluated_key": last_evaluated_key, "items": user_profiles}
