from core_lib.data_access.entity_type import EntityType
from core_lib.data_access.impl.dynamodb.base_dynamodb_data_model import (
    BASE_DYNAMODB_DATA_MODEL_SCHEMA,
    DynamoDBItem,
)
from core_lib.services.database.impl.dynamodb_service import build_new_item
from core_lib.utils.json_schema_util import (
    get_schema_validator,
    JSON_SCHEMA_2020_12_DRAFT,
    STRING,
    UUID_STRING,
    EMAIL_STRING,
    BOOLEAN,
    ACTIVE_STATUS,
    INACTIVE_STATUS,
    UUID_PATTERN,
)

USER_ENTITY_TYPE = EntityType.User

USER_DATA_MODEL_SCHEMA = {
    **BASE_DYNAMODB_DATA_MODEL_SCHEMA,
    "title": "UserDataModel",
    "type": "object",
    "properties": {
        **BASE_DYNAMODB_DATA_MODEL_SCHEMA["properties"],
        "pk": {"const": EntityType.User.value},
        "sk": {
            "type": "string",
            "pattern": f"^{EntityType.User.value}-{UUID_PATTERN}$",
        },
        "entity_type": {"const": EntityType.User.value},
        "profile": UUID_STRING,
        "username": STRING,
        "first_name": STRING,
        "last_name": STRING,
        "email": EMAIL_STRING,
        "entity_status": {"enum": [ACTIVE_STATUS, INACTIVE_STATUS]},
    },
    "required": BASE_DYNAMODB_DATA_MODEL_SCHEMA["required"]
    + ["profile", "username", "first_name", "last_name", "email", "entity_status"],
}

USER_JSON_SCHEMA_VALIDATOR = None


USER_ALLOWED_UPDATES_SCHEMA = {
    **JSON_SCHEMA_2020_12_DRAFT,
    "title": "UserAllowedUpdatesDataModel",
    "type": "object",
    "properties": {
        "entity_status": {"enum": [ACTIVE_STATUS, INACTIVE_STATUS]},
        "is_deleted": BOOLEAN,
    },
    "additionalProperties": False,
}

USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR = None


def get_user_json_schema_validator():
    global USER_JSON_SCHEMA_VALIDATOR

    if USER_JSON_SCHEMA_VALIDATOR is None:
        USER_JSON_SCHEMA_VALIDATOR = get_schema_validator(schema=USER_DATA_MODEL_SCHEMA)

    return USER_JSON_SCHEMA_VALIDATOR


def get_user_allowed_updates_json_schema_validator():
    global USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR

    if USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR is None:
        USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR = get_schema_validator(
            schema=USER_ALLOWED_UPDATES_SCHEMA
        )

    return USER_ALLOWED_UPDATES_JSON_SCHEMA_VALIDATOR


def build_formatted_user_id(user_id: str):
    return f"{USER_ENTITY_TYPE.value}-{user_id}"


def build_user_item_key(_id: str) -> dict:
    return {"pk": USER_ENTITY_TYPE.value, "sk": f"{build_formatted_user_id(_id)}"}


def build_new_user(user: dict):
    user["pk"] = USER_ENTITY_TYPE.value
    user["sk"] = build_formatted_user_id(user["profile"])
    user["entity_type"] = USER_ENTITY_TYPE.value
    return build_new_item(user)


class UserDynamoDBItem(DynamoDBItem):
    def __init__(self):
        super().__init__(
            new_item_builder=build_new_user,
            put_item_validator=get_user_json_schema_validator(),
            update_item_validator=get_user_allowed_updates_json_schema_validator(),
        )
