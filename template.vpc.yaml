AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Open Search Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  backupRegion:
    Description: "Backup Region"
    Type: String
  coreLayer:
    Description: "Core Library Layer"
    Type: String
  apiLayer:
    Description: "API Library Layer"
    Type: String
  stackType:
    Description: "(primary|secondary)"
    Type: String
    AllowedValues:
      - 'primary'
      - 'secondary'
    Default: 'primary'
  dbStreamArn:
    Description: "DB Stream ARN"
    Type: String

Conditions:
  isPrimary: !Equals [ !Ref stackType, 'primary' ]


Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "VPC Security Group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: Local HTTPS Traffic

  VPCRoutingStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.vpc.routing.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        vpcId: !Ref VPC
        privateSubnet1: !Ref PrivateSubnet1
        publicSubnet1: !Ref PublicSubnet1

#  DBEventStack:
#    Type: "AWS::CloudFormation::Stack"
#    Condition: isPrimary
#    Properties:
#      TemplateURL: template.db.event.yaml
#      Parameters:
#        stage: !Ref stage
#        backupRegion: !Ref backupRegion
#        coreLayer: !Ref coreLayer
#        securityGroup: !Ref SecurityGroup
#        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
#        enableVPC: true
#        dbStreamArn: !Ref dbStreamArn
#
#  QueueStack:
#    Type: "AWS::CloudFormation::Stack"
#    Properties:
#      TemplateURL: template.queue.yaml
#      Parameters:
#        stage: !Ref stage
#        backupRegion: !Ref backupRegion
#        coreLayer: !Ref coreLayer
#        securityGroup: !Ref SecurityGroup
#        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
#        enableVPC: true
#
#  AuthApiStack:
#    Type: "AWS::CloudFormation::Stack"
#    Properties:
#      TemplateURL: template.api.auth.yaml
#      Parameters:
#        stage: !Ref stage
#        backupRegion: !Ref backupRegion
#        coreLayer: !Ref coreLayer
#        apiLayer: !Ref apiLayer
#        securityGroup: !Ref SecurityGroup
#        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
#        enableVPC: true
#
#  UserApiStack:
#    Type: "AWS::CloudFormation::Stack"
#    Properties:
#      TemplateURL: template.api.user.yaml
#      Parameters:
#        stage: !Ref stage
#        backupRegion: !Ref backupRegion
#        coreLayer: !Ref coreLayer
#        apiLayer: !Ref apiLayer
#        securityGroup: !Ref SecurityGroup
#        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
#        enableVPC: true