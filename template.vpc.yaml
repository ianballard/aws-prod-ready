AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Open Search Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  backupRegion:
    Description: "Backup Region"
    Type: String
  coreLayer:
    Description: "Core Library Layer"
    Type: String
  apiLayer:
    Description: "API Library Layer"
    Type: String
  stackType:
    Description: "(primary|secondary)"
    Type: String
    AllowedValues:
      - 'primary'
      - 'secondary'
    Default: 'primary'
  dbStreamArn:
    Description: "DB Stream ARN"
    Type: String

Conditions:
  isPrimary: !Equals [ !Ref stackType, 'primary' ]


Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow local traffic within VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: Local HTTPS Traffic

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  #
  #  FlowLogRole:
  #    Type: "AWS::IAM::Role"
  #    Properties:
  #      AssumeRolePolicyDocument:
  #        Version: "2012-10-17"
  #        Statement:
  #          - Effect: "Allow"
  #            Principal:
  #              Service: "vpc-flow-logs.amazonaws.com"
  #            Action: "sts:AssumeRole"
  #      Policies:
  #        - PolicyName: "AllowCloudWatchLogs"
  #          PolicyDocument:
  #            Version: "2012-10-17"
  #            Statement:
  #              - Effect: "Allow"
  #                Action:
  #                  - "logs:CreateLogGroup"
  #                  - "logs:CreateLogStream"
  #                  - "logs:PutLogEvents"
  #                Resource: "arn:aws:logs:*:*:*"
  #
  #  FlowLog:
  #    Type: "AWS::EC2::FlowLog"
  #    Properties:
  #      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
  #      ResourceId: !Ref vpcId
  #      ResourceType: "VPC"
  #      TrafficType: "ALL"
  #      LogGroupName: !Ref VPCFlowLogGroup
  #
  #  VPCFlowLogGroup:
  #    Type: "AWS::Logs::LogGroup"
  #    Properties:
  #      RetentionInDays: 365

  DBEventStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: isPrimary
    Properties:
      TemplateURL: template.db.event.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref coreLayer
        securityGroup: !Ref SecurityGroup
        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
        enableVPC: true
        dbStreamArn: !Ref dbStreamArn

  QueueStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.queue.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref coreLayer
        securityGroup: !Ref SecurityGroup
        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
        enableVPC: true

  AuthApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.api.auth.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref coreLayer
        apiLayer: !Ref apiLayer
        securityGroup: !Ref SecurityGroup
        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
        enableVPC: true

  UserApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: template.api.user.yaml
      Parameters:
        stage: !Ref stage
        backupRegion: !Ref backupRegion
        coreLayer: !Ref coreLayer
        apiLayer: !Ref apiLayer
        securityGroup: !Ref SecurityGroup
        vpcSubnetIds: !Join [ ',', [ !Ref PrivateSubnet1 ] ]  # Comma-separated list of subnet IDs
        enableVPC: true