AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DB Event Stack

Parameters:
  stage:
    Description: "Stage"
    Type: String
  replicaRegion:
    Description: "Replica Region"
    Type: String
  coreLayer:
    Description: "Core Library Layer"
    Type: String
  securityGroup:
    Description: "Lambda VPC security group"
    Type: String
    Default: ""
  vpcSubnetIds:
    Description: "Lambda VPC Subnets"
    Type: CommaDelimitedList
    Default: ""
  enableVPC:
    Description: "Is VPC enabled (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  enableOpenSearch:
    Description: "Enable Open Search (true|false)"
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
  dbTableName:
    Description: "DB Table Name"
    Type: String
    Default: ''

Conditions:
  isVPCEnabled: !Equals [ !Ref enableVPC, 'true' ]

Globals:
  Function:
    MemorySize: 256
    Timeout: 30
    Runtime: python3.9
    Tracing: Active
    Environment:
      Variables:
        "stage": !Ref "stage"
        "region": !Ref AWS::Region
        "SEARCH_ENABLED": !Ref enableOpenSearch
    Layers:
      - !Ref coreLayer
    VpcConfig: !If
      - isVPCEnabled
      - SecurityGroupIds:
          - !Ref securityGroup
        SubnetIds: !Ref vpcSubnetIds
      - !Ref AWS::NoValue

Resources:

  DBStreamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DBStreamRoleCustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'es:ESHttpPost'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:ListStreams'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  DBStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/database_event
      Role: !GetAtt DBStreamRole.Arn
      Handler: database_event_handler.handle_db_event
      Timeout: 900
      Tags:
        function_role: search_write_function

  CreateDBStreamEventTriggerFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CreateDBStreamEventTriggerFunctionRoleCustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:ListStreams'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:CreateEventSourceMapping'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  CreateDBStreamEventTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./async/database_event
      Role: !GetAtt CreateDBStreamEventTriggerFunctionRole.Arn
      Handler: db_admin_functions.create_trigger
      Environment:
        Variables:
          "DBStreamHandlerFunctionArn": !GetAtt DBStream.Arn

  ExecuteCreateDBStreamEventTriggerFunction:
    Type: Custom::ExecuteCreateDBStreamEventTriggerFunction
    Properties:
      ServiceToken: !GetAtt CreateDBStreamEventTriggerFunction.Arn
      DBStreamHandlerFunctionArn: !GetAtt DBStream.Arn